{% set version = '0.3.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-lutz
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/lutz_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/lutz/lutz_{{ version }}.tar.gz
  sha256: fe94cf3c42c4b18a5eb694f8e42d920778bbf495290cb524f3d8f7e9f97f6895

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat (>= 2.1.0), sf (>= 0.7), sp, rgdal, datasets, covr, ggplot2
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp
    - r-lubridate

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp
    - r-lubridate

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('lutz')"           # [not win]
    - "\"%R%\" -e \"library('lutz')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://andyteucher.ca/lutz
  license: MIT
  summary: 'Input latitude and longitude values or an ''sf/sfc'' POINT object and get back the
    time zone in which they exist. Two methods are implemented. One is very fast and
    uses ''Rcpp'' in conjunction with data from the ''Javascript'' library (<https://github.com/darkskyapp/tz-lookup/>).
    This method also works outside of countries'' borders and in international waters,
    however speed comes at the cost of accuracy - near time zone borders away from populated
    centres there is a chance that it will return the incorrect time zone. The other
    method is slower but more accurate - it uses the ''sf'' package to intersect points
    with a detailed map of time zones from here: <https://github.com/evansiroky/timezone-boundary-builder/>.
    The package also contains several utility functions for helping to understand and
    visualize time zones, such as listing of world time zones, including information
    about daylight savings times and their offsets from UTC. You can also plot a time
    zone to visualize the UTC offset over a year and when daylight savings times are
    in effect.'
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: lutz
# Type: Package
# Title: Look Up Time Zones of Point Coordinates
# Version: 0.3.1
# Authors@R: c( person("Andy", "Teucher", email = "andy.teucher@gmail.com", role = c("aut", "cre"), comment = c(ORCID = "0000-0002-7840-692X")), person("Bob", "Rudis", email = "bob@rud.is", role = c("ctb"), comment = c(ORCID = "0000-0001-5670-2640")) )
# Description: Input latitude and longitude values or an 'sf/sfc' POINT object and get back the time zone in which they exist. Two methods are implemented. One is very fast and uses 'Rcpp' in conjunction with data from the 'Javascript' library (<https://github.com/darkskyapp/tz-lookup/>). This method also works outside of countries' borders and in international waters, however speed comes at the cost of accuracy - near time zone borders away from populated centres there is a chance that it will return the incorrect time zone. The other method is slower but more accurate - it uses the 'sf' package to intersect points with a detailed map of time zones from here: <https://github.com/evansiroky/timezone-boundary-builder/>. The package also contains several utility functions for helping to understand and visualize time zones, such as listing of world time zones, including information about daylight savings times and their offsets from UTC. You can also plot a time zone to visualize the UTC offset over a year and when daylight savings times are in effect.
# License: MIT + file LICENSE
# URL: https://andyteucher.ca/lutz
# BugReports: https://github.com/ateucher/lutz/issues
# SystemRequirements: C++11
# Depends: R (>= 3.2)
# Imports: stats, Rcpp, lubridate
# Suggests: testthat (>= 2.1.0), sf (>= 0.7), sp, rgdal, datasets, covr, ggplot2
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 6.1.1
# LinkingTo: Rcpp
# NeedsCompilation: yes
# Packaged: 2019-07-19 17:40:58 UTC; ateucher
# Author: Andy Teucher [aut, cre] (<https://orcid.org/0000-0002-7840-692X>), Bob Rudis [ctb] (<https://orcid.org/0000-0001-5670-2640>)
# Maintainer: Andy Teucher <andy.teucher@gmail.com>
# Repository: CRAN
# Date/Publication: 2019-07-19 22:10:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
