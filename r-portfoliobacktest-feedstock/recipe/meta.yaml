{% set version = '0.4.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-portfoliobacktest
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/portfolioBacktest_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/portfolioBacktest/portfolioBacktest_{{ version }}.tar.gz
  sha256: 6bed5604b5a340687ad87fbc2b9b51ea451167926ec05230b83b6637dc5ac7e1

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: CVXR, DT, ggfortify, gridExtra, knitr, prettydoc, readtext, rmarkdown, R.rsp, scales, stringi, testthat
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-performanceanalytics
    - r-r.utils
    - r-digest
    - r-evaluate
    - r-ggplot2
    - r-pbapply
    - r-quadprog
    - r-quantmod
    - r-rlang
    - r-xts
    - r-zoo

  run:
    - r-base
    - r-performanceanalytics
    - r-r.utils
    - r-digest
    - r-evaluate
    - r-ggplot2
    - r-pbapply
    - r-quadprog
    - r-quantmod
    - r-rlang
    - r-xts
    - r-zoo

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('portfolioBacktest')"           # [not win]
    - "\"%R%\" -e \"library('portfolioBacktest')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=portfolioBacktest, https://github.com/dppalomar/portfolioBacktest
  license: GPL-3
  summary: Automated backtesting of multiple portfolios over multiple datasets of stock prices
    in a rolling-window fashion. Intended for researchers and practitioners to backtest
    a set of different portfolios, as well as by a course instructor to assess the students
    in their portfolio design in a fully automated and convenient manner, with results
    conveniently formatted in tables and plots. Each portfolio design is easily defined
    as a function that takes as input a window of the stock prices and outputs the portfolio
    weights. Multiple portfolios can be easily specified as a list of functions or as
    files in a folder. Multiple datasets can be conveniently extracted randomly from
    different markets, different time periods, and different subsets of the stock universe.
    The results can be later assessed and ranked with tables based on a number of performance
    criteria (e.g., expected return, volatility, Sharpe ratio, drawdown, turnover rate,
    return on investment, computational time, etc.), as well as plotted in a number
    of ways with nice barplots and boxplots.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: portfolioBacktest
# Title: Automated Backtesting of Portfolios over Multiple Datasets
# Version: 0.4.1
# Date: 2022-04-22
# Description: Automated backtesting of multiple portfolios over multiple datasets of stock prices in a rolling-window fashion. Intended for researchers and practitioners to backtest a set of different portfolios, as well as by a course instructor to assess the students in their portfolio design in a fully automated and convenient manner, with results conveniently formatted in tables and plots. Each portfolio design is easily defined as a function that takes as input a window of the stock prices and outputs the portfolio weights. Multiple portfolios can be easily specified as a list of functions or as files in a folder. Multiple datasets can be conveniently extracted randomly from different markets, different time periods, and different subsets of the stock universe. The results can be later assessed and ranked with tables based on a number of performance criteria (e.g., expected return, volatility, Sharpe ratio, drawdown, turnover rate, return on investment, computational time, etc.), as well as plotted in a number of ways with nice barplots and boxplots.
# Authors@R: c( person(c("Daniel", "P."), "Palomar", role = c("cre", "aut"), email = "daniel.p.palomar@gmail.com"), person("Rui", "Zhou", role =  "aut", email = "rzhouae@connect.ust.hk") )
# Maintainer: Daniel P. Palomar <daniel.p.palomar@gmail.com>
# URL: https://CRAN.R-project.org/package=portfolioBacktest, https://github.com/dppalomar/portfolioBacktest
# BugReports: https://github.com/dppalomar/portfolioBacktest/issues
# License: GPL-3
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 7.1.1
# Depends: R (>= 2.10)
# Imports: digest, evaluate, ggplot2, pbapply, PerformanceAnalytics, parallel, quadprog, quantmod, R.utils, rlang, stats, utils, xts, zoo
# Suggests: CVXR, DT, ggfortify, gridExtra, knitr, prettydoc, readtext, rmarkdown, R.rsp, scales, stringi, testthat
# VignetteBuilder: knitr, rmarkdown, R.rsp
# NeedsCompilation: no
# Packaged: 2022-04-22 02:21:55 UTC; palomar
# Author: Daniel P. Palomar [cre, aut], Rui Zhou [aut]
# Repository: CRAN
# Date/Publication: 2022-04-22 08:30:09 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
