{% set version = '1.4.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-mhctools
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/MHCtools_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/MHCtools/MHCtools_{{ version }}.tar.gz
  sha256: c95a28ece0cf0c4b9f70401d3ce5a8f63a45fe649dfc8e429d6ff4b1f0550cfb

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-mgcv

  run:
    - r-base
    - r-mgcv

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('MHCtools')"           # [not win]
    - "\"%R%\" -e \"library('MHCtools')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=MHCtools
  license: MIT
  summary: Twelve tools for bioinformatical processing and analysis of major histocompatibility
    complex (MHC) data. The functions are tailored for amplicon data sets that have
    been filtered using the 'dada2' method (for more information on 'dada2', visit <https://benjjneb.github.io/dada2/>
    ), but even other types of data sets can be analyzed. The DistCalc() function calculates
    Grantham, Sandberg, or p-distances from pairwise comparisons of all sequences in
    a data set, and mean distances of all pairwise comparisons within each sample in
    a data set. The function additionally outputs five tables with physico-chemical
    z-descriptor values (based on Sandberg et al. 1998) for each amino acid position
    in all sequences in the data set. These tables may be useful for further downstream
    analyses, such as estimation of MHC supertypes. The BootKmeans() function is a wrapper
    for the kmeans() function of the 'stats' package, which allows for bootstrapping.
    Bootstrapping k-estimates may be desirable in data sets, where e.g. BIC- vs. k-values
    do not produce clear inflection points ("elbows"). BootKmeans() performs multiple
    runs of kmeans() and estimates optimal k-values based on a user-defined threshold
    of BIC reduction. The method is an automated and bootstrapped version of visually
    inspecting elbow plots of BIC- vs. k-values. The ClusterMatch() function is a tool
    for evaluating whether different k-means() clustering models identify similar clusters,
    and summarize bootstrap model stats as means for different estimated values of k.
    It is designed to take files produced by the BootKmeans() function as input, but
    other data can be analysed if the descriptions of the required data formats are
    observed carefully. The HpltFind() function infers putative haplotypes from families
    in the data set. The GetHpltTable() and GetHpltStats() functions evaluate the accuracy
    of the haplotype inference. The PapaDiv() function compares parent pairs in the
    data set and calculate their joint MHC diversity, taking into account sequence variants
    that occur in both parents. The ReplMatch() function matches replicates in data
    sets in order to evaluate genotyping success. The GetReplTable() and GetReplStats()
    functions perform such an evaluation. The CreateFas() function creates a fasta file
    with all the sequences in the data set. The CreateSamplesFas() function creates
    individual fasta files for each sample in the data set.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: MHCtools
# Type: Package
# Title: Analysis of MHC Data in Non-Model Species
# Version: 1.4.2
# Authors@R: person("Jacob", "Roved", email = "jacob.roved@biol.lu.se", role = c("aut", "cre"))
# Description: Twelve tools for bioinformatical processing and analysis of major histocompatibility complex (MHC) data. The functions are tailored for amplicon data sets that have been filtered using the 'dada2' method (for more information on 'dada2', visit <https://benjjneb.github.io/dada2/> ), but even other types of data sets can be analyzed. The DistCalc() function calculates Grantham, Sandberg, or p-distances from pairwise comparisons of all sequences in a data set, and mean distances of all pairwise comparisons within each sample in a data set. The function additionally outputs five tables with physico-chemical z-descriptor values (based on Sandberg et al. 1998) for each amino acid position in all sequences in the data set. These tables may be useful for further downstream analyses, such as estimation of MHC supertypes. The BootKmeans() function is a wrapper for the kmeans() function of the 'stats' package, which allows for bootstrapping. Bootstrapping k-estimates may be desirable in data sets, where e.g. BIC- vs. k-values do not produce clear inflection points ("elbows"). BootKmeans() performs multiple runs of kmeans() and estimates optimal k-values based on a user-defined threshold of BIC reduction. The method is an automated and bootstrapped version of visually inspecting elbow plots of BIC- vs. k-values. The ClusterMatch() function is a tool for evaluating whether different k-means() clustering models identify similar clusters, and summarize bootstrap model stats as means for different estimated values of k. It is designed to take files produced by the BootKmeans() function as input, but other data can be analysed if the descriptions of the required data formats are observed carefully. The HpltFind() function infers putative haplotypes from families in the data set. The GetHpltTable() and GetHpltStats() functions evaluate the accuracy of the haplotype inference. The PapaDiv() function compares parent pairs in the data set and calculate their joint MHC diversity, taking into account sequence variants that occur in both parents. The ReplMatch() function matches replicates in data sets in order to evaluate genotyping success. The GetReplTable() and GetReplStats() functions perform such an evaluation. The CreateFas() function creates a fasta file with all the sequences in the data set. The CreateSamplesFas() function creates individual fasta files for each sample in the data set.
# License: MIT + file LICENSE
# Encoding: UTF-8
# LazyData: true
# Imports: stats, utils, mgcv, grDevices, graphics
# RoxygenNote: 7.1.2
# NeedsCompilation: no
# Packaged: 2022-05-23 17:58:38 UTC; jacobroved
# Author: Jacob Roved [aut, cre]
# Maintainer: Jacob Roved <jacob.roved@biol.lu.se>
# Depends: R (>= 3.5.0)
# Repository: CRAN
# Date/Publication: 2022-05-23 18:10:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
