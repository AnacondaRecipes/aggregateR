{% set version = '1.2.0.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-promises
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/promises_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/promises/promises_{{ version }}.tar.gz
  sha256: 8d3a8217909e91f4c2a2eebba5ac8fc902a9ac1a9e9d8a30815c9dc0f162c4b7

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, future (>= 1.21.0), fastmap (>= 1.1.0), purrr, knitr, rmarkdown, vembedr, spelling
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-r6
    - r-rcpp
    - r-later
    - r-magrittr
    - r-rlang

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-r6
    - r-rcpp
    - r-later
    - r-magrittr
    - r-rlang

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('promises')"           # [not win]
    - "\"%R%\" -e \"library('promises')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://rstudio.github.io/promises/, https://github.com/rstudio/promises
  license: MIT
  summary: Provides fundamental abstractions for doing asynchronous programming in R using promises.
    Asynchronous programming is useful for allowing a single R process to orchestrate
    multiple tasks in the background while also attending to something else. Semantics
    are similar to 'JavaScript' promises, but with a syntax that is idiomatic R.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - mingwandroid

# The original CRAN metadata for this package was:

# Package: promises
# Type: Package
# Title: Abstractions for Promise-Based Asynchronous Programming
# Version: 1.2.0.1
# Authors@R: c( person("Joe", "Cheng", email = "joe@rstudio.com", role = c("aut", "cre")), person("RStudio", role = c("cph", "fnd")) )
# Description: Provides fundamental abstractions for doing asynchronous programming in R using promises. Asynchronous programming is useful for allowing a single R process to orchestrate multiple tasks in the background while also attending to something else. Semantics are similar to 'JavaScript' promises, but with a syntax that is idiomatic R.
# License: MIT + file LICENSE
# Imports: R6, Rcpp, later, rlang, stats, magrittr
# Suggests: testthat, future (>= 1.21.0), fastmap (>= 1.1.0), purrr, knitr, rmarkdown, vembedr, spelling
# LinkingTo: later, Rcpp
# RoxygenNote: 7.1.1
# Encoding: UTF-8
# LazyData: true
# VignetteBuilder: knitr
# URL: https://rstudio.github.io/promises/, https://github.com/rstudio/promises
# BugReports: https://github.com/rstudio/promises/issues
# Language: en-US
# NeedsCompilation: yes
# Packaged: 2021-02-11 18:18:47 UTC; barret
# Author: Joe Cheng [aut, cre], RStudio [cph, fnd]
# Maintainer: Joe Cheng <joe@rstudio.com>
# Repository: CRAN
# Date/Publication: 2021-02-11 19:00:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
