{% set version = '1.0.3' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-jvcoords
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/jvcoords_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/jvcoords/jvcoords_{{ version }}.tar.gz
  sha256: ac187545ea3cd762db48ccd8dd0057f996ba3e6938a602d56beda320eff8b5c7

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('jvcoords')"           # [not win]
    - "\"%R%\" -e \"library('jvcoords')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/seehuhn/jvcoords
  license: GPL-3
  summary: Provides functions to standardize and whiten data, and to perform Principal Component
    Analysis (PCA).  The main advantage of this package over alternatives like prcomp()
    is, that jvcoords makes it easy to convert (additional) data between the original
    and the transformed coordinates.  The package also provides a class coords, which
    can represent affine coordinate transformations.  This class forms the basis of
    the transformations provided by the package, but can also be used independently.  The
    implementation has been optimized to be of comparable speed (and sometimes even
    faster) than existing alternatives.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: jvcoords
# Type: Package
# Title: Principal Component Analysis (PCA) and Whitening
# Version: 1.0.3
# Date: 2021-06-05
# Authors@R: person("Jochen", "Voss", email="voss@seehuhn.de", role=c("aut", "cre"), comment = c(ORCID = "0000-0002-2323-3814"))
# License: GPL-3
# URL: https://github.com/seehuhn/jvcoords
# Description: Provides functions to standardize and whiten data, and to perform Principal Component Analysis (PCA).  The main advantage of this package over alternatives like prcomp() is, that jvcoords makes it easy to convert (additional) data between the original and the transformed coordinates.  The package also provides a class coords, which can represent affine coordinate transformations.  This class forms the basis of the transformations provided by the package, but can also be used independently.  The implementation has been optimized to be of comparable speed (and sometimes even faster) than existing alternatives.
# NeedsCompilation: no
# Packaged: 2021-06-05 16:43:19 UTC; voss
# Author: Jochen Voss [aut, cre] (<https://orcid.org/0000-0002-2323-3814>)
# Maintainer: Jochen Voss <voss@seehuhn.de>
# Repository: CRAN
# Date/Publication: 2021-06-05 17:00:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
