{% set version = '1.1.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-sns
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/sns_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/sns/sns_{{ version }}.tar.gz
  sha256: f962cf0faf21c18ce1a1c78921cf9e7b579113715351c2a1b6c08bd54f695f8c

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: RegressionFactory, MfUSampler
requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-coda
    - r-mvtnorm
    - r-numderiv

  run:
    - r-base
    - r-coda
    - r-mvtnorm
    - r-numderiv

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('sns')"           # [not win]
    - "\"%R%\" -e \"library('sns')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=sns
  license: GPL-2
  summary: 'Stochastic Newton Sampler (SNS) is a Metropolis-Hastings-based, Markov Chain Monte
    Carlo sampler for twice differentiable, log-concave probability density functions
    (PDFs) where the proposal density function is a multivariate Gaussian resulting
    from a second-order Taylor-series expansion of log-density around the current point.
    The mean of the Gaussian proposal is the full Newton-Raphson step from the current
    point. A Boolean flag allows for switching from SNS to Newton-Raphson optimization
    (by choosing the mean of proposal function as next point). This can be used during
    burn-in to get close to the mode of the PDF (which is unique due to concavity).
    For high-dimensional densities, mixing can be improved via ''state space partitioning''
    strategy, in which SNS is applied to disjoint subsets of state space, wrapped in
    a Gibbs cycle. Numerical differentiation is available when analytical expressions
    for gradient and Hessian are not available. Facilities for validation and numerical
    differentiation of log-density are provided. '

  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: sns
# Type: Package
# Title: Stochastic Newton Sampler (SNS)
# Version: 1.1.2
# Date: 2016-10-24
# Author: Alireza S. Mahani, Asad Hasan, Marshall Jiang, Mansour T.A. Sharabiani
# Maintainer: Alireza Mahani <alireza.s.mahani@gmail.com>
# Description: Stochastic Newton Sampler (SNS) is a Metropolis-Hastings-based, Markov Chain Monte Carlo sampler for twice differentiable, log-concave probability density functions (PDFs) where the proposal density function is a multivariate Gaussian resulting from a second-order Taylor-series expansion of log-density around the current point. The mean of the Gaussian proposal is the full Newton-Raphson step from the current point. A Boolean flag allows for switching from SNS to Newton-Raphson optimization (by choosing the mean of proposal function as next point). This can be used during burn-in to get close to the mode of the PDF (which is unique due to concavity). For high-dimensional densities, mixing can be improved via 'state space partitioning' strategy, in which SNS is applied to disjoint subsets of state space, wrapped in a Gibbs cycle. Numerical differentiation is available when analytical expressions for gradient and Hessian are not available. Facilities for validation and numerical differentiation of log-density are provided.
# License: GPL (>= 2)
# Imports: mvtnorm, coda, numDeriv
# Suggests: RegressionFactory, MfUSampler
# NeedsCompilation: no
# Repository: CRAN
# Packaged: 2016-10-25 00:25:53 UTC; asmahani
# Date/Publication: 2016-10-25 10:31:12

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
