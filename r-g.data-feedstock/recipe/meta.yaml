{% set version = '2.4' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-g.data
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/g.data_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/g.data/g.data_{{ version }}.tar.gz
  sha256: f453b71d1a52111a9e06a8a64ee1380bd5479be77d563fc30c725c3436a84491

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('g.data')"           # [not win]
    - "\"%R%\" -e \"library('g.data')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=g.data
  license: GPL-3
  summary: Create and maintain delayed-data packages (ddp's).  Data stored in a ddp are available
    on demand, but do not take up memory until requested. You attach a ddp with g.data.attach(),
    then read from it and assign to it in a manner similar to S-PLUS, except that you
    must run g.data.save() to actually commit to disk.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: g.data
# Version: 2.4
# Date: 2013-12-16
# Title: Delayed-Data Packages
# Author: David Brahm <brahm@alum.mit.edu>
# Maintainer: David Brahm <brahm@alum.mit.edu>
# Description: Create and maintain delayed-data packages (ddp's).  Data stored in a ddp are available on demand, but do not take up memory until requested. You attach a ddp with g.data.attach(), then read from it and assign to it in a manner similar to S-PLUS, except that you must run g.data.save() to actually commit to disk.
# License: GPL
# Packaged: 2013-12-16 22:06:04 UTC; a215020
# NeedsCompilation: no
# Repository: CRAN
# Date/Publication: 2013-12-17 07:09:33

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
