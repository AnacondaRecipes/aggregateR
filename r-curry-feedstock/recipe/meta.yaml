{% set version = '0.1.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-curry
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/curry_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/curry/curry_{{ version }}.tar.gz
  sha256: 4930c6d5cdb6fa319b888d2220b9ded2c7bf786d8a700ad102558065d78649df

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('curry')"           # [not win]
    - "\"%R%\" -e \"library('curry')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/thomasp85/curry
  license: GPL-2
  summary: Partial application is the process of reducing the arity of a function by fixing one
    or more arguments, thus creating a new function lacking the fixed arguments. The
    curry package provides three different ways of performing partial function application
    by fixing arguments from either end of the argument list (currying and tail currying)
    or by fixing multiple named arguments (partial application). This package provides
    this functionality through the %<%, %-<%, and %><% operators which allows for a
    programming style comparable to modern functional languages. Compared to other implementations
    such a purrr::partial() the operators in curry composes functions with named arguments,
    aiding in autocomplete etc.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: curry
# Type: Package
# Title: Partial Function Application with %<%, %-<%, and %><%
# Version: 0.1.1
# Date: 2016-09-28
# Author: Thomas Lin Pedersen
# Maintainer: Thomas Lin Pedersen <thomasp85@gmail.com>
# Description: Partial application is the process of reducing the arity of a function by fixing one or more arguments, thus creating a new function lacking the fixed arguments. The curry package provides three different ways of performing partial function application by fixing arguments from either end of the argument list (currying and tail currying) or by fixing multiple named arguments (partial application). This package provides this functionality through the %<%, %-<%, and %><% operators which allows for a programming style comparable to modern functional languages. Compared to other implementations such a purrr::partial() the operators in curry composes functions with named arguments, aiding in autocomplete etc.
# License: GPL (>= 2)
# LazyData: TRUE
# RoxygenNote: 5.0.1
# Collate: 'utils.R' 'curry.R' 'partial.R' 'scaffold.R' 'tail_curry.R'
# URL: https://github.com/thomasp85/curry
# BugReports: https://github.com/thomasp85/curry/issues
# NeedsCompilation: no
# Packaged: 2016-09-28 18:18:09 UTC; Thomas
# Repository: CRAN
# Date/Publication: 2016-09-28 22:18:23

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
