{% set version = '1.4-12' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-ebayesthresh
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/EbayesThresh_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/EbayesThresh/EbayesThresh_{{ version }}.tar.gz
  sha256: 28850348aa0752a75e0c8f1ae20ef7e352a6493abe8b6a6c40ac09f5476b421d

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, knitr, rmarkdown, dplyr, ggplot2
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-wavethresh

  run:
    - r-base
    - r-wavethresh

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('EbayesThresh')"           # [not win]
    - "\"%R%\" -e \"library('EbayesThresh')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/stephenslab/EbayesThresh
  license: GPL-2
  summary: Empirical Bayes thresholding using the methods developed by I. M. Johnstone and B.
    W. Silverman. The basic problem is to estimate a mean vector given a vector of observations
    of the mean vector plus white noise, taking advantage of possible sparsity in the
    mean vector. Within a Bayesian formulation, the elements of the mean vector are
    modelled as having, independently, a distribution that is a mixture of an atom of
    probability at zero and a suitable heavy-tailed distribution. The mixing parameter
    can be estimated by a marginal maximum likelihood approach. This leads to an adaptive
    thresholding approach on the original data. Extensions of the basic method, in particular
    to wavelet thresholding, are also implemented within the package.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

# The original CRAN metadata for this package was:

# Package: EbayesThresh
# Encoding: UTF-8
# Type: Package
# Title: Empirical Bayes Thresholding and Related Methods
# Version: 1.4-12
# Date: 2017-07-29
# Authors@R: c(person("Bernard W.","Silverman",role="aut"), person("Ludger","Evers",role="aut", email = "ludger@stats.gla.ac.uk"), person("Kan","Xu",role="aut"), person("Peter","Carbonetto",role=c("aut","cre"), email = "peter.carbonetto@gmail.com"), person("Matthew","Stephens",role="aut"))
# URL: https://github.com/stephenslab/EbayesThresh
# BugReports: https://github.com/stephenslab/EbayesThresh/issues
# Description: Empirical Bayes thresholding using the methods developed by I. M. Johnstone and B. W. Silverman. The basic problem is to estimate a mean vector given a vector of observations of the mean vector plus white noise, taking advantage of possible sparsity in the mean vector. Within a Bayesian formulation, the elements of the mean vector are modelled as having, independently, a distribution that is a mixture of an atom of probability at zero and a suitable heavy-tailed distribution. The mixing parameter can be estimated by a marginal maximum likelihood approach. This leads to an adaptive thresholding approach on the original data. Extensions of the basic method, in particular to wavelet thresholding, are also implemented within the package.
# Imports: stats, wavethresh
# Suggests: testthat, knitr, rmarkdown, dplyr, ggplot2
# NeedsCompilation: no
# License: GPL (>= 2)
# VignetteBuilder: knitr
# Packaged: 2017-07-30 12:06:51 UTC; pcarbo
# Author: Bernard W. Silverman [aut], Ludger Evers [aut], Kan Xu [aut], Peter Carbonetto [aut, cre], Matthew Stephens [aut]
# Maintainer: Peter Carbonetto <peter.carbonetto@gmail.com>
# Repository: CRAN
# Date/Publication: 2017-08-08 04:02:13 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
