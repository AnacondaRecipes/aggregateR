{% set version = '2.1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-humanleague
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/humanleague_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/humanleague/humanleague_{{ version }}.tar.gz
  sha256: 3df3efde2e61fc619805777ea2dfd53f08dea3962c7d4aab02269fd439a6e7d6

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.8

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.12.8

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('humanleague')"           # [not win]
    - "\"%R%\" -e \"library('humanleague')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=humanleague
  license: MIT
  summary: Generates high-entropy integer synthetic populations from marginal and (optionally)
    seed data using quasirandom sampling,  in arbitrary dimensionality (Smith, Lovelace
    and Birkin (2017) <doi:10.18564/jasss.3550>).  The package also provides an implementation
    of the Iterative Proportional Fitting (IPF) algorithm (Zaloznik (2011) <doi:10.13140/2.1.2480.9923>).
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENCE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: humanleague
# Type: Package
# Title: Synthetic Population Generator
# Version: 2.1.0
# Description: Generates high-entropy integer synthetic populations from marginal and (optionally) seed data using quasirandom sampling,  in arbitrary dimensionality (Smith, Lovelace and Birkin (2017) <doi:10.18564/jasss.3550>).  The package also provides an implementation of the Iterative Proportional Fitting (IPF) algorithm (Zaloznik (2011) <doi:10.13140/2.1.2480.9923>).
# Authors@R: c( person("Andrew", "Smith", email="a.p.smith@leeds.ac.uk", role=c("aut", "cre")), person("Steven", "Johnson", role=c("ctb"), comment="Sobol sequence generator implementation"), person("Massachusetts Institute of Technology", role=c("cph"), comment="Sobol sequence generator implementation"), person("John", "Burkhardt", role=c("ctb","cph"), comment="C++ implementation of incomplete gamma function"), person("G", "Bhattacharjee", role=c("ctb"), comment="Original FORTRAN implementation of incomplete gamma function"))
# License: MIT + file LICENCE
# Encoding: UTF-8
# LazyData: true
# Imports: Rcpp (>= 0.12.8)
# LinkingTo: Rcpp
# RoxygenNote: 6.0.1
# Suggests: testthat
# NeedsCompilation: yes
# Packaged: 2018-12-05 09:27:47 UTC; az
# Author: Andrew Smith [aut, cre], Steven Johnson [ctb] (Sobol sequence generator implementation), Massachusetts Institute of Technology [cph] (Sobol sequence generator implementation), John Burkhardt [ctb, cph] (C++ implementation of incomplete gamma function), G Bhattacharjee [ctb] (Original FORTRAN implementation of incomplete gamma function)
# Maintainer: Andrew Smith <a.p.smith@leeds.ac.uk>
# Repository: CRAN
# Date/Publication: 2018-12-05 11:40:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
