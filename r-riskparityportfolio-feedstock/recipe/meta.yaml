{% set version = '0.2.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-riskparityportfolio
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/riskParityPortfolio_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/riskParityPortfolio/riskParityPortfolio_{{ version }}.tar.gz
  sha256: f382e1b38ccc8c095442fc9e62fd9d73a8c282ad7c29d6a3cc3e16d769e79aae

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, ggplot2, numDeriv, pagedown, prettydoc, rmarkdown, R.rsp, testthat, viridisLite
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-matrix
    - r-rcpp
    - r-rcppeigen
    - r-alabama
    - r-nloptr
    - r-quadprog

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-matrix
    - r-rcpp
    - r-rcppeigen
    - r-alabama
    - r-nloptr
    - r-quadprog

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('riskParityPortfolio')"           # [not win]
    - "\"%R%\" -e \"library('riskParityPortfolio')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=riskParityPortfolio, https://github.com/dppalomar/riskParityPortfolio,
    https://www.danielppalomar.com, https://doi.org/10.1109/TSP.2015.2452219
  license: GPL-3
  summary: 'Fast design of risk parity portfolios for financial investment. The goal of the risk
    parity portfolio formulation is to equalize or distribute the risk contributions
    of the different assets, which is missing if we simply consider the overall volatility
    of the portfolio as in the mean-variance Markowitz portfolio. In addition to the
    vanilla formulation, where the risk contributions are perfectly equalized subject
    to no shortselling and budget constraints, many other formulations are considered
    that allow for box constraints and shortselling, as well as the inclusion of additional
    objectives like the expected return and overall variance. See vignette for a detailed
    documentation and comparison, with several illustrative examples. The package is
    based on the papers: Y. Feng, and D. P. Palomar (2015). SCRIP: Successive Convex
    Optimization Methods for Risk Parity Portfolio Design. IEEE Trans. on Signal Processing,
    vol. 63, no. 19, pp. 5285-5300. <doi:10.1109/TSP.2015.2452219>. F. Spinu (2013),
    An Algorithm for Computing Risk Parity Weights. <doi:10.2139/ssrn.2297383>. T. Griveau-Billion,
    J. Richard, and T. Roncalli (2013). A fast algorithm for computing  High-dimensional
    risk parity portfolios. <arXiv:1311.4057>.'

  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: riskParityPortfolio
# Title: Design of Risk Parity Portfolios
# Version: 0.2.0
# Date: 2019-08-31
# Description: Fast design of risk parity portfolios for financial investment. The goal of the risk parity portfolio formulation is to equalize or distribute the risk contributions of the different assets, which is missing if we simply consider the overall volatility of the portfolio as in the mean-variance Markowitz portfolio. In addition to the vanilla formulation, where the risk contributions are perfectly equalized subject to no shortselling and budget constraints, many other formulations are considered that allow for box constraints and shortselling, as well as the inclusion of additional objectives like the expected return and overall variance. See vignette for a detailed documentation and comparison, with several illustrative examples. The package is based on the papers: Y. Feng, and D. P. Palomar (2015). SCRIP: Successive Convex Optimization Methods for Risk Parity Portfolio Design. IEEE Trans. on Signal Processing, vol. 63, no. 19, pp. 5285-5300. <doi:10.1109/TSP.2015.2452219>. F. Spinu (2013), An Algorithm for Computing Risk Parity Weights. <doi:10.2139/ssrn.2297383>. T. Griveau-Billion, J. Richard, and T. Roncalli (2013). A fast algorithm for computing  High-dimensional risk parity portfolios. <arXiv:1311.4057>.
# Authors@R: c( person("Ze", "Vinicius", role = "aut", email = "jvmirca@gmail.com"), person(c("Daniel", "P."), "Palomar", role = c("cre", "aut"), email = "daniel.p.palomar@gmail.com") )
# Maintainer: Daniel P. Palomar <daniel.p.palomar@gmail.com>
# URL: https://CRAN.R-project.org/package=riskParityPortfolio, https://github.com/dppalomar/riskParityPortfolio, https://www.danielppalomar.com, https://doi.org/10.1109/TSP.2015.2452219
# BugReports: https://github.com/dppalomar/riskParityPortfolio/issues
# Depends:
# License: GPL-3 | file LICENSE
# Encoding: UTF-8
# LazyData: true
# LinkingTo: Rcpp, RcppEigen
# RoxygenNote: 6.1.1
# Imports: alabama, Matrix, nloptr, quadprog, Rcpp
# Suggests: knitr, ggplot2, numDeriv, pagedown, prettydoc, rmarkdown, R.rsp, testthat, viridisLite
# VignetteBuilder: knitr, rmarkdown, R.rsp
# NeedsCompilation: yes
# Packaged: 2019-08-31 18:46:01 UTC; palomar
# Author: Ze Vinicius [aut], Daniel P. Palomar [cre, aut]
# Repository: CRAN
# Date/Publication: 2019-08-31 19:20:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
