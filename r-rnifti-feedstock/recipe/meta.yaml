{% set version = '1.5.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rnifti
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/RNifti_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/RNifti/RNifti_{{ version }}.tar.gz
  sha256: 32e4dfd35643932e0f2021b22cfc26cedff51dff13b940d9a3abe6282bf5e905

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat (>= 0.11.0), covr, reportr, shades
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}sed               # [win]
    - {{ posix }}grep              # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake          # [not win]
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}pkg-config
    - {{ posix }}make
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.11.0

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.11.0

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('RNifti')"           # [not win]
    - "\"%R%\" -e \"library('RNifti')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/jonclayden/RNifti
  license: GPL-2
  summary: Provides very fast read and write access to images stored in the NIfTI-1, NIfTI-2
    and ANALYZE-7.5 formats, with seamless synchronisation of in-memory image objects
    between compiled C and interpreted R code. Also provides a simple image viewer,
    and a C/C++ API that can be used by other packages. Not to be confused with 'RNiftyReg',
    which performs image registration and applies spatial transformations.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: RNifti
# Version: 1.5.0
# Date: 2023-05-17
# Title: Fast R and C++ Access to NIfTI Images
# Authors@R: c(person("Jon", "Clayden", role=c("cre","aut"), email="code@clayden.org", comment=c(ORCID="0000-0002-6608-0619")), person("Bob", "Cox", role="aut"), person("Mark", "Jenkinson", role="aut"), person("Matt", "Hall", role="ctb"), person("Rick", "Reynolds", role="ctb"), person("Kate", "Fissell", role="ctb"), person("Jean-loup", "Gailly", role="cph"), person("Mark", "Adler", role="cph"))
# Imports: Rcpp (>= 0.11.0)
# Suggests: testthat (>= 0.11.0), covr, reportr, shades
# Enhances: oro.nifti, tractor.base
# LinkingTo: Rcpp
# Description: Provides very fast read and write access to images stored in the NIfTI-1, NIfTI-2 and ANALYZE-7.5 formats, with seamless synchronisation of in-memory image objects between compiled C and interpreted R code. Also provides a simple image viewer, and a C/C++ API that can be used by other packages. Not to be confused with 'RNiftyReg', which performs image registration and applies spatial transformations.
# License: GPL-2
# URL: https://github.com/jonclayden/RNifti
# BugReports: https://github.com/jonclayden/RNifti/issues
# Encoding: UTF-8
# RoxygenNote: 7.2.3
# NeedsCompilation: yes
# Packaged: 2023-05-17 17:28:07 UTC; jon
# Author: Jon Clayden [cre, aut] (<https://orcid.org/0000-0002-6608-0619>), Bob Cox [aut], Mark Jenkinson [aut], Matt Hall [ctb], Rick Reynolds [ctb], Kate Fissell [ctb], Jean-loup Gailly [cph], Mark Adler [cph]
# Maintainer: Jon Clayden <code@clayden.org>
# Repository: CRAN
# Date/Publication: 2023-05-17 18:40:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
