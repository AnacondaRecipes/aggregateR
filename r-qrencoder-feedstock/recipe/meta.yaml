{% set version = '0.1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-qrencoder
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/qrencoder_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/qrencoder/qrencoder_{{ version }}.tar.gz
  sha256: 684347f976b1f36cb2e9b9e2205cba78822b2cbd2822212ae00d47271e05e6d1

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp
    - r-base64enc
    - r-png
    - r-raster

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp
    - r-base64enc
    - r-png
    - r-raster

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('qrencoder')"           # [not win]
    - "\"%R%\" -e \"library('qrencoder')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://github.com/hrbrmstr/qrencoder
  license: GPL-2
  summary: Quick Response codes (QR codes) are a type of matrix bar code and can be used to authenticate
    transactions, provide access to multi-factor authentication services and enable
    general data transfer in an image. QR codes use four standardized encoding modes
    (numeric, alphanumeric, byte/binary, and kanji) to efficiently store data. Matrix
    barcode generation is performed efficiently in C via the included 'libqrencoder'
    library created by Kentaro Fukuchi.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: qrencoder
# Title: Quick Response Code (QR Code) / Matrix Barcode Creator
# Version: 0.1.0
# Authors@R: c( person("Bob", "Rudis", email = "bob@rud.is", role = c("aut", "cre")), person("Kentaro", "Fukuchi", role=("ctb"), comment="libqrencoder") )
# Maintainer: Bob Rudis <bob@rud.is>
# Description: Quick Response codes (QR codes) are a type of matrix bar code and can be used to authenticate transactions, provide access to multi-factor authentication services and enable general data transfer in an image. QR codes use four standardized encoding modes (numeric, alphanumeric, byte/binary, and kanji) to efficiently store data. Matrix barcode generation is performed efficiently in C via the included 'libqrencoder' library created by Kentaro Fukuchi.
# Depends: R (>= 3.1.0), raster
# License: GPL-2
# LazyData: true
# Suggests: testthat
# LinkingTo: Rcpp
# Imports: Rcpp, base64enc, png
# URL: http://github.com/hrbrmstr/qrencoder
# BugReports: https://github.com/hrbrmstr/qrencoder/issues
# RoxygenNote: 5.0.1
# NeedsCompilation: yes
# Packaged: 2016-09-15 22:05:22 UTC; bob
# Author: Bob Rudis [aut, cre], Kentaro Fukuchi [ctb] (libqrencoder)
# Repository: CRAN
# Date/Publication: 2016-09-16 01:50:10

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
