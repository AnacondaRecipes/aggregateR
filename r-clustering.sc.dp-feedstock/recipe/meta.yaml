{% set version = '1.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-clustering.sc.dp
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/clustering.sc.dp_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/clustering.sc.dp/clustering.sc.dp_{{ version }}.tar.gz
  sha256: 4c17eb4d8bebeddf614842571bfbdb095df9254da76d0b2c4e88fd2e77cfaf50

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('clustering.sc.dp')"           # [not win]
    - "\"%R%\" -e \"library('clustering.sc.dp')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=clustering.sc.dp
  license: LGPL-3
  summary: 'A dynamic programming algorithm for optimal clustering multidimensional data with
    sequential constraint. The algorithm minimizes the sum of squares of within-cluster
    distances. The sequential constraint allows only subsequent items of the input data
    to form a cluster. The sequential constraint is typically required in clustering
    data streams or items with time stamps such as video frames, GPS signals of a vehicle,
    movement data of a person, e-pen data, etc. The algorithm represents an extension
    of ''Ckmeans.1d.dp'' to multiple dimensional spaces. Similarly to the one-dimensional
    case, the algorithm guarantees optimality and repeatability of clustering. Method
    clustering.sc.dp() can find the optimal clustering if the number of clusters is
    known. Otherwise, methods findwithinss.sc.dp() and backtracking.sc.dp() can be used.
    See Szkaliczki, T. (2016) "clustering.sc.dp: Optimal Clustering with Sequential
    Constraint by Using Dynamic Programming" <doi: 10.32614/RJ-2016-022> for more information.'
  license_family: LGPL
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/LGPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: clustering.sc.dp
# Type: Package
# Title: Optimal Distance-Based Clustering for Multidimensional Data with Sequential Constraint
# Version: 1.1
# Date: 2023-02-03
# Authors@R: c(person("Tibor", "Szkaliczki", role = c("aut", "cre"), email = "szkaliczki.tibor@sztaki.hu"), person("J.", "Song", role = "ctb", email = "joemsong@cs.nmsu.edu"))
# Author: Tibor Szkaliczki [aut, cre], J. Song [ctb]
# Maintainer: Tibor Szkaliczki <szkaliczki.tibor@sztaki.hu>
# Depends: R (>= 2.10.0)
# Description: A dynamic programming algorithm for optimal clustering multidimensional data with sequential constraint. The algorithm minimizes the sum of squares of within-cluster distances. The sequential constraint allows only subsequent items of the input data to form a cluster. The sequential constraint is typically required in clustering data streams or items with time stamps such as video frames, GPS signals of a vehicle, movement data of a person, e-pen data, etc. The algorithm represents an extension of 'Ckmeans.1d.dp' to multiple dimensional spaces. Similarly to the one-dimensional case, the algorithm guarantees optimality and repeatability of clustering. Method clustering.sc.dp() can find the optimal clustering if the number of clusters is known. Otherwise, methods findwithinss.sc.dp() and backtracking.sc.dp() can be used. See Szkaliczki, T. (2016) "clustering.sc.dp: Optimal Clustering with Sequential Constraint by Using Dynamic Programming" <doi: 10.32614/RJ-2016-022> for more information.
# License: LGPL (>= 3)
# NeedsCompilation: yes
# Packaged: 2023-02-10 08:07:43 UTC; sztibor
# Repository: CRAN
# Date/Publication: 2023-02-10 09:30:11 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
