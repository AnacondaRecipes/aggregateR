{% set version = '0.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-optismixture
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/optismixture_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/optismixture/optismixture_{{ version }}.tar.gz
  sha256: 2dc7654ad6a48989f018fe0b3ec9bddd19d444fd1e38e860b8527d4bf1724c59

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-matrix
    - r-mvtnorm

  run:
    - r-base
    - r-matrix
    - r-mvtnorm

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('optismixture')"           # [not win]
    - "\"%R%\" -e \"library('optismixture')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=optismixture
  license: GPL-2
  summary: Code for optimal mixture weights in importance sampling. Workhorse functions penoptpersp()
    and penoptpersp.alpha.only() minimize estimated variances with and without control
    variates respectively. It can be used in adaptive mixture importance sampling, for
    example, function batch.estimation() does two stages, a pilot estimate of mixing
    alpha and a following importance sampling.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: optismixture
# Title: Optimal Mixture Weights in Multiple Importance Sampling
# Description: Code for optimal mixture weights in importance sampling. Workhorse functions penoptpersp() and penoptpersp.alpha.only() minimize estimated variances with and without control variates respectively. It can be used in adaptive mixture importance sampling, for example, function batch.estimation() does two stages, a pilot estimate of mixing alpha and a following importance sampling.
# Version: 0.1
# Author: Hera Y. He, Art B. Owen
# Maintainer: Hera Y. He <yhe1@stanford.edu>
# Depends: R (>= 3.0.2)
# Imports: mvtnorm, Matrix
# License: GPL-2
# LazyData: true
# Packaged: 2015-08-25 16:39:58 UTC; hera
# NeedsCompilation: no
# Repository: CRAN
# Date/Publication: 2015-08-25 19:20:56

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
