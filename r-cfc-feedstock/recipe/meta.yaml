{% set version = '1.2.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-cfc
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/CFC_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/CFC/CFC_{{ version }}.tar.gz
  sha256: fe7e2cb2ed07b6879af3c0c517be520a9b8d5a284367ef710a68f5d8fcb04b99

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.1
    - r-rcpparmadillo
    - r-rcppprogress
    - r-abind
    - r-doparallel
    - r-foreach
    - r-survival

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.12.1
    - r-rcpparmadillo
    - r-rcppprogress
    - r-abind
    - r-doparallel
    - r-foreach
    - r-survival

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('CFC')"           # [not win]
    - "\"%R%\" -e \"library('CFC')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=CFC
  license: GPL-2
  summary: 'Numerical integration of cause-specific survival curves to arrive at cause-specific
    cumulative incidence functions, with three usage modes: 1) Convenient API for parametric
    survival regression followed by competing-risk analysis, 2) API for CFC, accepting
    user-specified survival functions in R, and 3) Same as 2, but accepting survival
    functions in C++. For mathematical details and software tutorial, see Mahani and
    Sharabiani (2019) <DOI:10.18637/jss.v089.i09>.'
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: CFC
# Type: Package
# Title: Cause-Specific Framework for Competing-Risk Analysis
# Version: 1.2.0
# Date: 2022-12-25
# Author: Mansour T.A. Sharabiani, Alireza S. Mahani
# Maintainer: Alireza S. Mahani <alireza.s.mahani@gmail.com>
# Description: Numerical integration of cause-specific survival curves to arrive at cause-specific cumulative incidence functions, with three usage modes: 1) Convenient API for parametric survival regression followed by competing-risk analysis, 2) API for CFC, accepting user-specified survival functions in R, and 3) Same as 2, but accepting survival functions in C++. For mathematical details and software tutorial, see Mahani and Sharabiani (2019) <DOI:10.18637/jss.v089.i09>.
# License: GPL (>= 2)
# Imports: Rcpp (>= 0.12.1), abind, survival, doParallel, foreach
# LinkingTo: Rcpp, RcppArmadillo, RcppProgress
# NeedsCompilation: yes
# Packaged: 2022-12-25 22:55:57 UTC; ec2-user
# Repository: CRAN
# Date/Publication: 2023-01-09 08:00:06 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
