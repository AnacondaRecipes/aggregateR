{% set version = '3.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-cpprouting
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/cppRouting_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/cppRouting/cppRouting_{{ version }}.tar.gz
  sha256: bed3a5545f4e8b2ad849735c499149a5ee668d032ec54eb9ce1e523ec53417d6

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, rmarkdown, igraph
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp >=1.0.7
    - r-rcppparallel
    - r-rcppprogress
    - r-data.table

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=1.0.7
    - r-rcppparallel
    - r-rcppprogress
    - r-data.table

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('cppRouting')"           # [not win]
    - "\"%R%\" -e \"library('cppRouting')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/vlarmet/cppRouting
  license: GPL-2
  summary: Calculation of distances, shortest paths and isochrones on weighted graphs using several
    variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra
    (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg,
    Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>),
    A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>),
    new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>),
    Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008)
    <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk,
    R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the
    traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages,
    Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>),
    Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg
    (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>).
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: cppRouting
# Type: Package
# Title: Algorithms for Routing and Solving the Traffic Assignment Problem
# Version: 3.1
# Date: 2022-11-28
# Author: Vincent Larmet
# Maintainer: Vincent Larmet <larmet.vincent@gmail.com>
# Description: Calculation of distances, shortest paths and isochrones on weighted graphs using several variants of Dijkstra algorithm. Proposed algorithms are unidirectional Dijkstra (Dijkstra, E. W. (1959) <doi:10.1007/BF01386390>), bidirectional Dijkstra (Goldberg, Andrew & Fonseca F. Werneck, Renato (2005) <https://archive.siam.org/meetings/alenex05/papers/03agoldberg.pdf>), A* search (P. E. Hart, N. J. Nilsson et B. Raphael (1968) <doi:10.1109/TSSC.1968.300136>), new bidirectional A* (Pijls & Post (2009) <https://repub.eur.nl/pub/16100/ei2009-10.pdf>), Contraction hierarchies (R. Geisberger, P. Sanders, D. Schultes and D. Delling (2008) <doi:10.1007/978-3-540-68552-4_24>), PHAST (D. Delling, A.Goldberg, A. Nowatzyk, R. Werneck (2011) <doi:10.1016/j.jpdc.2012.02.007>). Algorithms for solving the traffic assignment problem are All-or-Nothing assignment, Method of Successive Averages, Frank-Wolfe algorithm (M. Fukushima (1984) <doi:10.1016/0191-2615(84)90029-8>), Conjugate and Bi-Conjugate Frank-Wolfe algorithms (M. Mitradjieva, P. O. Lindberg (2012) <doi:10.1287/trsc.1120.0409>), Algorithm-B (R. B. Dial (2006) <doi:10.1016/j.trb.2006.02.008>).
# License: GPL (>= 2)
# Encoding: UTF-8
# Imports: Rcpp (>= 1.0.7), RcppParallel, RcppProgress, data.table
# LinkingTo: Rcpp, RcppParallel, RcppProgress
# SystemRequirements: GNU make, C++11
# RoxygenNote: 7.2.1
# URL: https://github.com/vlarmet/cppRouting
# Suggests: knitr, rmarkdown, igraph
# VignetteBuilder: knitr
# NeedsCompilation: yes
# Packaged: 2022-11-29 07:45:49 UTC; vincent
# Repository: CRAN
# Date/Publication: 2022-12-01 13:20:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
