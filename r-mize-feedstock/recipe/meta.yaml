{% set version = '0.2.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-mize
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/mize_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/mize/mize_{{ version }}.tar.gz
  sha256: 0659e734d122b37877334ab7e7597b7529ccbd058777e3738f931569b746e2dc

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, knitr, rmarkdown, covr
requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('mize')"           # [not win]
    - "\"%R%\" -e \"library('mize')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://github.com/jlmelville/mize
  license: BSD_2_clause
  summary: Optimization algorithms implemented in R, including conjugate gradient (CG), Broyden-Fletcher-Goldfarb-Shanno
    (BFGS) and the limited memory BFGS (L-BFGS) methods. Most internal parameters can
    be set  through the call interface. The solvers hold up quite well for  higher-dimensional
    problems.
  license_family: BSD
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/BSD_2_clause'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: mize
# Type: Package
# Title: Unconstrained Numerical Optimization Algorithms
# Version: 0.2.2
# Authors@R: person("James", "Melville", email = "jlmelville@gmail.com", role = c("aut", "cre"))
# Description: Optimization algorithms implemented in R, including conjugate gradient (CG), Broyden-Fletcher-Goldfarb-Shanno (BFGS) and the limited memory BFGS (L-BFGS) methods. Most internal parameters can be set  through the call interface. The solvers hold up quite well for  higher-dimensional problems.
# License: BSD 2-clause License + file LICENSE
# Encoding: UTF-8
# LazyData: true
# Imports: methods
# Suggests: testthat, knitr, rmarkdown, covr
# RoxygenNote: 6.1.0
# URL: http://github.com/jlmelville/mize
# BugReports: http://github.com/jlmelville/mize/issues
# VignetteBuilder: knitr
# NeedsCompilation: no
# Packaged: 2019-07-11 05:57:03 UTC; jlmel
# Author: James Melville [aut, cre]
# Maintainer: James Melville <jlmelville@gmail.com>
# Repository: CRAN
# Date/Publication: 2019-07-11 06:28:21 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
