{% set version = '4.0.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-multinet
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/multinet_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/multinet/multinet_{{ version }}.tar.gz
  sha256: 8f01522bdd425780c9200a0171f89e2740404ed1cb64bc499bb9b87d086f9048

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcolorbrewer
    - r-rcpp >=1.0
    - r-igraph >=1.2

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcolorbrewer
    - r-rcpp >=1.0
    - r-igraph >=1.2

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('multinet')"           # [not win]
    - "\"%R%\" -e \"library('multinet')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=multinet
  license: GPL-3
  summary: Functions for the creation/generation and analysis of multilayer social networks <doi:10.18637/jss.v098.i08>.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: multinet
# Type: Package
# Title: Analysis and Mining of Multilayer Social Networks
# Version: 4.0.1
# Date: 2022-01-04
# Authors@R: c(person("Matteo", "Magnani", role = c("aut", "cre"), email = "matteo.magnani@it.uu.se"), person("Luca", "Rossi", role = "aut", comment="API design"), person("Davide", "Vega", role = "aut", comment="API and code design"), person("Obaida", "Hanteer", role = "ctb", comment="mdlpa, flat_ec, flat_nw, some community evaluation functions"))
# Maintainer: Matteo Magnani <matteo.magnani@it.uu.se>
# Description: Functions for the creation/generation and analysis of multilayer social networks <doi:10.18637/jss.v098.i08>.
# License: GPL
# Depends: igraph (>= 1.2), Rcpp (>= 1.0), methods, RColorBrewer
# LinkingTo: Rcpp
# RcppModules: multinet
# SystemRequirements: A C++14 compiler
# NeedsCompilation: yes
# Repository: CRAN
# Note: a previous version of the library (main version number: 3) was developed as part of the European Union's Horizon 2020 research and innovation programme under grant agreement No. 727040 (Virt-EU). The package uses functions from eclat <https://borgelt.net/eclat.html>, for association rule mining, Infomap <https://www.mapequation.org>, for the Infomap community detection method (please refer to their web site for up-to-date code), and Howard Hinnant's date and time library <https://github.com/HowardHinnant/date>. The code from these libraries has been included in our source package.
# Packaged: 2022-01-04 14:03:57 UTC; matteomagnami
# Author: Matteo Magnani [aut, cre], Luca Rossi [aut] (API design), Davide Vega [aut] (API and code design), Obaida Hanteer [ctb] (mdlpa, flat_ec, flat_nw, some community evaluation functions)
# Date/Publication: 2022-01-05 00:20:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
