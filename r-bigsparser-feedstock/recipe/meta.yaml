{% set version = '0.6.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-bigsparser
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/bigsparser_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/bigsparser/bigsparser_{{ version }}.tar.gz
  sha256: c1c37faf6faf6077b367a0b8c2ecb51110b1197d7232eb66fa169fb87380d02c

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat (>= 2.1.0)
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-matrix
    - r-rcpp
    - r-rcppeigen
    - r-bigassertr
    - r-rmio >=0.4

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-matrix
    - r-rcpp
    - r-rcppeigen
    - r-bigassertr
    - r-rmio >=0.4

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('bigsparser')"           # [not win]
    - "\"%R%\" -e \"library('bigsparser')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/privefl/bigsparser
  license: GPL-3
  summary: Provide a sparse matrix format with data stored on disk, to be used in both R and
    C++. This is intended for more efficient use of sparse data in C++ and also when
    parallelizing, since data on disk does not need copying. Only a limited number of
    features will be implemented. For now, conversion can be performed from a 'dgCMatrix'
    or a 'dsCMatrix' from R package 'Matrix'. A new compact format is also now available.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: bigsparser
# Title: Sparse Matrix Format with Data on Disk
# Version: 0.6.1
# Authors@R: person(given = "Florian", family = "Prive", role = c("aut", "cre"), email = "florian.prive.21@gmail.com")
# Description: Provide a sparse matrix format with data stored on disk, to be used in both R and C++. This is intended for more efficient use of sparse data in C++ and also when parallelizing, since data on disk does not need copying. Only a limited number of features will be implemented. For now, conversion can be performed from a 'dgCMatrix' or a 'dsCMatrix' from R package 'Matrix'. A new compact format is also now available.
# License: GPL-3
# Encoding: UTF-8
# RoxygenNote: 7.1.1
# URL: https://github.com/privefl/bigsparser
# BugReports: https://github.com/privefl/bigsparser/issues
# Depends: R (>= 3.1)
# LinkingTo: Rcpp, RcppEigen, rmio
# Imports: Rcpp, bigassertr, methods, Matrix, rmio (>= 0.4)
# Suggests: testthat (>= 2.1.0)
# NeedsCompilation: yes
# Packaged: 2022-06-06 06:25:00 UTC; au639593
# Author: Florian Prive [aut, cre]
# Maintainer: Florian Prive <florian.prive.21@gmail.com>
# Repository: CRAN
# Date/Publication: 2022-06-07 04:30:25 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
