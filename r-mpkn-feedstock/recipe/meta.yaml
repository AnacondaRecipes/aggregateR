{% set version = '0.1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-mpkn
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/MPkn_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/MPkn/MPkn_{{ version }}.tar.gz
  sha256: bbef03ccf7bdde70430a2be9c446ff3877b6e2aa9e7150e1adec7a1eb6366d5b

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, rmarkdown, matrixcalc, markovchain, matlib
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('MPkn')"           # [not win]
    - "\"%R%\" -e \"library('MPkn')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=MPkn
  license: GPL-3
  summary: 'A matrix discrete model having the form ''M[i+1] = (I + Q)*M[i]''. The calculation
    of the values of ''M[i]'' only for pre-selected values of ''i''. The method of calculation
    is presented in the vignette ''Fundament'' (''Base''). Maybe it`s own idea of the
    author of the package. A weakness is that the method gives information only in selected
    steps of the process. It mainly refers to cases with matrices that are not Markov
    chain. If ''Q'' is Markov transition matrix, then MUPkL() may be used to calculate
    the steady-state distribution ''p'' for ''p = Q*p''. Matrix power of non integer
    (matrix.powerni()) gives the same results as a mpower() from package ''matlib''.
    References: "Markov chains", (<https://en.wikipedia.org/wiki/Markov_chain#Expected_number_of_visits>).
    Donald R. Burleson, Ph.D. (2005), "ON NON-INTEGER POWERS OF A SQUARE MATRIX", (<http://www.blackmesapress.com/Eigenvalues.htm>).'
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: MPkn
# Type: Package
# Title: Calculations of One Discrete Model in Several Time Steps
# Version: 0.1.0
# Date: 2018-05-03
# Author: Josef Brejcha
# Maintainer: Josef Brejcha <brchjo@gmail.com>
# Suggests: knitr, rmarkdown, matrixcalc, markovchain, matlib
# VignetteBuilder: knitr
# Description: A matrix discrete model having the form 'M[i+1] = (I + Q)*M[i]'. The calculation of the values of 'M[i]' only for pre-selected values of 'i'. The method of calculation is presented in the vignette 'Fundament' ('Base'). Maybe it`s own idea of the author of the package. A weakness is that the method gives information only in selected steps of the process. It mainly refers to cases with matrices that are not Markov chain. If 'Q' is Markov transition matrix, then MUPkL() may be used to calculate the steady-state distribution 'p' for 'p = Q*p'. Matrix power of non integer (matrix.powerni()) gives the same results as a mpower() from package 'matlib'. References: "Markov chains", (<https://en.wikipedia.org/wiki/Markov_chain#Expected_number_of_visits>). Donald R. Burleson, Ph.D. (2005), "ON NON-INTEGER POWERS OF A SQUARE MATRIX", (<http://www.blackmesapress.com/Eigenvalues.htm>).
# License: GPL (>= 3)
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 6.0.1
# NeedsCompilation: no
# Packaged: 2018-05-07 12:44:03 UTC; brchjo
# Repository: CRAN
# Date/Publication: 2018-05-07 13:05:21 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
