{% set version = '0.6.10' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-comprehenr
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/comprehenr_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/comprehenr/comprehenr_{{ version }}.tar.gz
  sha256: 5c08efe824278b086a9f45823b2239206b3190e463c607d3ebb690cab5018cf2

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, tinytest, rmarkdown
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('comprehenr')"           # [not win]
    - "\"%R%\" -e \"library('comprehenr')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/gdemin/comprehenr
  license: GPL-2
  summary: Provides 'Python'-style list comprehensions. List comprehension expressions use usual
    loops (for(), while() and repeat()) and usual if() as list producers. In many cases
    it gives more concise notation than standard "*apply + filter" strategy.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: comprehenr
# Type: Package
# Title: List Comprehensions
# Version: 0.6.10
# Maintainer: Gregory Demin <gdemin@gmail.com>
# Authors@R: person("Gregory", "Demin", email = "gdemin@gmail.com", role = c("aut", "cre"))
# Description: Provides 'Python'-style list comprehensions. List comprehension expressions use usual loops (for(), while() and repeat()) and usual if() as list producers. In many cases it gives more concise notation than standard "*apply + filter" strategy.
# URL: https://github.com/gdemin/comprehenr
# BugReports: https://github.com/gdemin/comprehenr/issues
# Depends: R (>= 3.3.0),
# Suggests: knitr, tinytest, rmarkdown
# VignetteBuilder: knitr
# License: GPL-2
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 7.1.1
# NeedsCompilation: no
# Packaged: 2021-01-31 00:41:15 UTC; gregory
# Author: Gregory Demin [aut, cre]
# Repository: CRAN
# Date/Publication: 2021-01-31 05:40:05 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
