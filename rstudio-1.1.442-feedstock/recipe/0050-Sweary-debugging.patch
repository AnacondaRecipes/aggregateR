From 9a8f9838f803bf480d32f11b862bec17b0c9d8a5 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sun, 9 Sep 2018 12:51:19 +0100
Subject: [PATCH 50/52] Sweary debugging

---
 src/cpp/core/r_util/REnvironmentPosix.cpp | 16 ++++++---
 src/cpp/core/system/PosixSystem.cpp       | 14 +++++---
 src/cpp/r/RExec.cpp                       |  2 ++
 src/cpp/r/include/r/RExec.hpp             |  1 +
 src/cpp/session/SessionOptions.cpp        | 44 +++++++++++++++++++++--
 5 files changed, 65 insertions(+), 12 deletions(-)

diff --git a/src/cpp/core/r_util/REnvironmentPosix.cpp b/src/cpp/core/r_util/REnvironmentPosix.cpp
index 9850d0cd04..afdab16918 100644
--- a/src/cpp/core/r_util/REnvironmentPosix.cpp
+++ b/src/cpp/core/r_util/REnvironmentPosix.cpp
@@ -113,12 +113,18 @@ FilePath systemDefaultRScript(std::string* pErrMsg)
    // by a relative path from the executable. This is similar to what we do
    // in REnviornmentPosix.cpp
    char* conda_prefix = getenv("CONDA_PREFIX");
-   if (conda_prefix != NULL)
-       rScriptPaths.push_back(std::string(conda_prefix) + "/bin/R");
-   FilePath prefix;
-   Error error = core::system::installPath("../bin/R", NULL, &prefix);
-   if (prefix.exists())
+   if (conda_prefix != NULL) {
+      rScriptPaths.push_back(std::string(conda_prefix) + "/bin/R");
+      printf("Urgh 1 (conda_prefix), %s\n", rScriptPaths[0].c_str());
+   } else {
+      printf("Urgh 2 (no conda_prefix\n");
+      FilePath prefix;
+      Error error = core::system::installPath("../bin/R", NULL, &prefix);
+      if (prefix.exists())
       rScriptPaths.push_back(prefix.absolutePath());
+   }
+#else
+#error NO CONDA_BUILD
 #endif
    rScriptPaths.push_back("/usr/bin/R");
    rScriptPaths.push_back("/usr/local/bin/R");
diff --git a/src/cpp/core/system/PosixSystem.cpp b/src/cpp/core/system/PosixSystem.cpp
index 45e5a8c246..05af36a831 100644
--- a/src/cpp/core/system/PosixSystem.cpp
+++ b/src/cpp/core/system/PosixSystem.cpp
@@ -58,6 +58,8 @@
 #include <boost/range.hpp>
 #include <boost/algorithm/string/replace.hpp>
 #include <boost/algorithm/string/split.hpp>
+#define BOOST_STACKTRACE_GNU_SOURCE_NOT_REQUIRED
+#include <boost/stacktrace.hpp>
 
 #include <core/RegexUtils.hpp>
 #include <core/Algorithm.hpp>
@@ -695,13 +697,15 @@ Error installPath(const std::string& relativeToExecutable,
                   FilePath* pInstallPath)
 {
    // get executable path
-   FilePath executablePath;
-   Error error = system::executablePath(argv0, &executablePath);
-   if (error)
-      return error;
-
+   FilePath executablePath(argv0);
+//   Error error = system::executablePath(argv0, &executablePath);
+//   if (error)
+//      return error;
+   printf("executablePath %s\n", executablePath.canonicalPath().c_str());
+   std::cout << boost::stacktrace::stacktrace();
    // fully resolve installation path relative to executable
    FilePath installPath = executablePath.parent().complete(relativeToExecutable);
+   printf("installPath %s\n", installPath.canonicalPath().c_str());
    return realPath(installPath.absolutePath(), pInstallPath);
 }
 
diff --git a/src/cpp/r/RExec.cpp b/src/cpp/r/RExec.cpp
index 17f6df425d..2cffa636cf 100644
--- a/src/cpp/r/RExec.cpp
+++ b/src/cpp/r/RExec.cpp
@@ -279,6 +279,8 @@ Error evaluateString(const std::string& str,
    // surrond the string with try in silent mode so we can capture error text
    std::string rCode = "base::try(" + str + ", TRUE)";
 
+   printf("rCode: %s\n", rCode.c_str());
+
    // parse expression
    SEXP ps;
    Error parseError = parseString(rCode, &ps, pProtect);
diff --git a/src/cpp/r/include/r/RExec.hpp b/src/cpp/r/include/r/RExec.hpp
index f8a72cc21d..4d584d4fc4 100644
--- a/src/cpp/r/include/r/RExec.hpp
+++ b/src/cpp/r/include/r/RExec.hpp
@@ -91,6 +91,7 @@ core::Error evaluateString(const std::string& str, T* pValue)
 {
    sexp::Protect rProtect;
    SEXP valueSEXP ;
+   printf("EVALUATESTRING :: \n%s\n", str.c_str());
    core::Error error = evaluateString(str, &valueSEXP, &rProtect);
    if (error)
       return error ;
diff --git a/src/cpp/session/SessionOptions.cpp b/src/cpp/session/SessionOptions.cpp
index fff099619c..7cf2dac4fa 100644
--- a/src/cpp/session/SessionOptions.cpp
+++ b/src/cpp/session/SessionOptions.cpp
@@ -119,21 +119,56 @@ core::ProgramStatus Options::read(int argc, char * const argv[], std::ostream& o
    core::system::unsetenv(kMonitorSharedSecretEnvVar);
 
    // compute the resource path
+   Error error;
+
+   const char * www_suffix;
+   if (true || session::options().programMode() == kSessionProgramModeServer) {
+      printf("kSessionProgramModeServer\n");
+      www_suffix = "..";
+   } else {
+      printf("kSessionProgramModeDesktop\n");
+      www_suffix = "../share/rstudio";
+  }
+
 #ifndef CONDA_BUILD
-   Error error = core::system::installPath("..", argv[0], &resourcePath_);
+   error = core::system::installPath("..", argv[0], &resourcePath_);
 #else
-   Error error = core::system::installPath("../share/rstudio", argv[0], &resourcePath_);
+//   printf("1 resourcePath_\n");
+//   char* conda_prefix = "/Users/rdonnelly/server-build/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehol";
+   char* conda_prefix = getenv("CONDA_PREFIX");
+   struct stat info;
+   if (!conda_prefix || stat(conda_prefix, &info) != 0)
+   {
+      printf("BAD 1 conda_prefix=%s\n", conda_prefix);
+   }
+   else
+   {
+      // Partly to aid debugging.
+      char * fakeArgv0 = (char *)alloca(strlen(conda_prefix)+strlen("/bin/resession")+1);
+      sprintf(fakeArgv0, "%s%s", conda_prefix, "/bin/rsession");
+//      struct stat info;
+//      if (!conda_prefix || stat(conda_prefix, &info) != 0)
+
+      printf("BAD 2 conda_prefix=%s\n", conda_prefix);
+      Error error = core::system::installPath(www_suffix, fakeArgv0, &resourcePath_);
+      printf("GOOD conda_prefix=%s resourcePath_ %s\n", conda_prefix, resourcePath_.absolutePathNative().c_str());
+   }
 #endif
+
    if (error || !resourcePath_.exists())
+//   if (1)
    {
       // debugging in Xcode/QtCreator/Visual Studio => some minor path manipulation.
       FilePath& supportingFilePath_ = resourcePath_;
+      printf("Urgh 1\n");
       supportingFilePath_ = FilePath(core::system::getenv("RSTUDIO_SUPPORTING_FILE_PATH"));
+      printf("2 supportingFilePath_ %s\n", supportingFilePath_.canonicalPath().c_str());
       if (error && supportingFilePath_.exists())
          error = Success();
    }
    if (error)
    {
+      printf("Urgh 2\n");
       LOG_ERROR_MESSAGE("Unable to determine install path: "+error.summary());
       return ProgramStatus::exitFailure();
    }
@@ -529,6 +564,11 @@ resourcePath_.complete("Info.plist").exists
          core::system::setenv("R_USER", verifyInstallationHomeDir_);
       }
    }
+   if (conda_prefix != NULL)
+   {
+     printf("Hopefully set CONDA_PREFIX?\n");
+     core::system::setenv("CONDA_PREFIX", std::string(conda_prefix));
+   }
 
    // compute user paths
    r_util::SessionType sessionType =
-- 
2.19.1

