From 4d32de6cb2da1071fbc8e81b0f2f023613264ec3 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Fri, 4 Nov 2016 23:44:53 +0000
Subject: [PATCH 35/52] more debugging

Hardcoded to write to C:/Users/ray/rstudio-log.txt ..
.. and to use port 28080
---
 src/cpp/desktop-mac/AppDelegate.mm     |  3 +++
 src/cpp/desktop-mac/SessionLauncher.mm | 10 ++++++++--
 src/cpp/desktop/DesktopOptions.cpp     |  1 +
 src/cpp/session/SessionMain.cpp        |  4 ++++
 src/cpp/session/SessionOptions.cpp     |  7 +++++++
 5 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/src/cpp/desktop-mac/AppDelegate.mm b/src/cpp/desktop-mac/AppDelegate.mm
index 6bd8d5c913..ddad93ee10 100644
--- a/src/cpp/desktop-mac/AppDelegate.mm
+++ b/src/cpp/desktop-mac/AppDelegate.mm
@@ -376,6 +376,9 @@ bool prepareEnvironment(Options& options)
    
    // initailize the session launcher and launch the first session
    sessionLauncher().init(sessionPath, confPath);
+   std::cerr << "filename is " << filename << std::endl;
+   std::cerr << "sessionPath is " << sessionPath.absolutePath() << std::endl;
+   std::cerr << "scriptsPath is " << scriptsPath.absolutePath() << std::endl;
    error = sessionLauncher().launchFirstSession(filename);
    if (error)
    {
diff --git a/src/cpp/desktop-mac/SessionLauncher.mm b/src/cpp/desktop-mac/SessionLauncher.mm
index 2be3d98b32..f0475aa7db 100644
--- a/src/cpp/desktop-mac/SessionLauncher.mm
+++ b/src/cpp/desktop-mac/SessionLauncher.mm
@@ -365,14 +365,20 @@ Error SessionLauncher::launchSession(const std::string& host,
    
    boost::function<void(const core::system::ProcessResult&)> onCompleted =
                   boost::bind(&SessionLauncher::onRSessionExited, this, _1);
-   
+   std::cerr << sessionPath_.absolutePath() << std::endl;
    error = launchProcess(sessionPath_.absolutePath(), args, onCompleted);
    if (error)
       return error;
    
    // session process is active
    sessionProcessActive_ = true;
-   
+
+   std::cerr << "waitWithTimeout" << std::endl;
+   for(std::vector<std::string>::iterator it = args.begin(); it != args.end(); ++it)
+   {
+      std::cerr << "arg=" << *it << std::endl;
+   }
+
    // wait for process to be available
    return waitWithTimeout(boost::bind(serverReady, host, port), 50, 25, 10);
 }
diff --git a/src/cpp/desktop/DesktopOptions.cpp b/src/cpp/desktop/DesktopOptions.cpp
index a4ed145ba7..3e1c7b5431 100644
--- a/src/cpp/desktop/DesktopOptions.cpp
+++ b/src/cpp/desktop/DesktopOptions.cpp
@@ -86,6 +86,7 @@ QString Options::portNumber() const
       // instances of rdesktop-launched rsessions
       int base = std::abs(core::random::uniformRandomInteger<int>());
       portNumber_ = QString::number((base % 40000) + 8080);
+      portNumber_ = QString::number(28080);
 
       // recalculate the local peer and set RS_LOCAL_PEER so that
       // rsession and it's children can use it
diff --git a/src/cpp/session/SessionMain.cpp b/src/cpp/session/SessionMain.cpp
index 99383966d9..985af9e7cf 100644
--- a/src/cpp/session/SessionMain.cpp
+++ b/src/cpp/session/SessionMain.cpp
@@ -185,6 +185,9 @@
 
 #include <tests/TestRunner.hpp>
 
+#include <iostream>
+#include <fstream>
+
 using namespace rstudio;
 using namespace rstudio::core;
 
@@ -1512,6 +1515,7 @@ bool ensureUtf8Charset()
 // run session
 int main (int argc, char * const argv[]) 
 {
+   std::ofstream tmp_log; tmp_log.open("C:/Users/ray/rstudio-log.txt", std::ios::app); tmp_log << "Hello from main():" << std::endl; tmp_log.close();
    try
    {      
       // initialize log so we capture all errors including ones which occur
diff --git a/src/cpp/session/SessionOptions.cpp b/src/cpp/session/SessionOptions.cpp
index b58a4c2b1f..0761811ba7 100644
--- a/src/cpp/session/SessionOptions.cpp
+++ b/src/cpp/session/SessionOptions.cpp
@@ -41,6 +41,9 @@
 #include <session/SessionScopes.hpp>
 #include <session/projects/SessionProjectSharing.hpp>
 
+#include <iostream>
+#include <fstream>
+
 #include "session-config.h"
 
 using namespace rstudio::core ;
@@ -134,6 +137,8 @@ core::ProgramStatus Options::read(int argc, char * const argv[], std::ostream& o
       return ProgramStatus::exitFailure();
    }
 
+   std::ofstream tmp_log; tmp_log.open("C:/Users/ray/rstudio-log.txt", std::ios::app); tmp_log << "resourcePath_: " << resourcePath_.absolutePath() << std::endl; tmp_log.close();
+
    // detect running in OSX bundle and tweak resource path
 #if defined(__APPLE__) && !defined(CONDA_BUILD)
 resourcePath_.complete("Info.plist").exists
@@ -747,6 +752,7 @@ void Options::bundleOrCondaResolvePath(const FilePath& resourcePath,
    {
       resolvePath(resourcePath, pPath);
    }
+   std::ofstream tmp_log; tmp_log.open("C:/Users/ray/rstudio-log.txt", std::ios::app); tmp_log << "default: " << defaultPath << " .. resolved: " << *pPath << std::endl; tmp_log.close();
 }
 
 void Options::resolveIDEPath(const std::string& cppRelativeLocation,
@@ -786,6 +792,7 @@ void Options::resolveIDEPath(const std::string& cppRelativeLocation,
       if (it->exists())
       {
          *pPath = it->absolutePath();
+          std::ofstream tmp_log; tmp_log.open("C:/Users/ray/rstudio-log.txt", std::ios::app); tmp_log << "resolveIDEPath: exeName: " << *pPath << std::endl; tmp_log.close();
          return;
       }
    }
-- 
2.19.1

