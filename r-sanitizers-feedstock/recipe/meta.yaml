{% set version = '0.1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-sanitizers
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/sanitizers_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/sanitizers/sanitizers_{{ version }}.tar.gz
  sha256: c60a0b97b5f049b30621c4b2fd002765a3ea927b79266e11bedf866d5d1828b0

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('sanitizers')"           # [not win]
    - "\"%R%\" -e \"library('sanitizers')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=sanitizers
  license: GPL-2
  summary: Recent gcc and clang compiler versions provide functionality to memory violations
    and other undefined behaviour; this is often referred to as "Address Sanitizer"
    (or SAN) and "Undefined Behaviour Sanitizer" (UBSAN). The Writing R Extension manual
    describes this in some detail in Section 4.9. . This feature has to be enabled in
    the corresponding binary, eg in R, which is somewhat involved as it also required
    a current compiler toolchain which  is not yet widely available, or in the case
    of Windows, not available at all (via the common Rtools mechanism). . As an alternative,
    the pre-built Docker containers available via the Docker Hub at https://registry.hub.docker.com/u/eddelbuettel/docker-debian-r/
    can be used on Linux, and via boot2docker on Windows and OS X. . This package then
    provides a means of testing the compiler setup as the known code failures provides
    in the sample code here should be detected correctly, whereas a default build of
    R will let the package pass. . The code samples are based on the examples from the
    Address Sanitizer Wiki at https://code.google.com/p/address-sanitizer/wiki/AddressSanitizer.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: sanitizers
# Type: Package
# Title: C/C++ source code to trigger Address and Undefined Behaviour Sanitizers
# Version: 0.1.0
# Date: 2014-08-02
# Author: Dirk Eddelbuettel
# Maintainer: Dirk Eddelbuettel <edd@debian.org>
# Description: Recent gcc and clang compiler versions provide functionality to memory violations and other undefined behaviour; this is often referred to as "Address Sanitizer" (or SAN) and "Undefined Behaviour Sanitizer" (UBSAN). The Writing R Extension manual describes this in some detail in Section 4.9. . This feature has to be enabled in the corresponding binary, eg in R, which is somewhat involved as it also required a current compiler toolchain which  is not yet widely available, or in the case of Windows, not available at all (via the common Rtools mechanism). . As an alternative, the pre-built Docker containers available via the Docker Hub at https://registry.hub.docker.com/u/eddelbuettel/docker-debian-r/ can be used on Linux, and via boot2docker on Windows and OS X. . This package then provides a means of testing the compiler setup as the known code failures provides in the sample code here should be detected correctly, whereas a default build of R will let the package pass. . The code samples are based on the examples from the Address Sanitizer Wiki at https://code.google.com/p/address-sanitizer/wiki/AddressSanitizer.
# License: GPL (>= 2)
# Packaged: 2014-08-02 17:39:35.506501 UTC; edd
# NeedsCompilation: yes
# Repository: CRAN
# Date/Publication: 2014-08-03 08:08:08

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
