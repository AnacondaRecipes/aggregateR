{% set version = '0.9.8-1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-excel.link
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/excel.link_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/excel.link/excel.link_{{ version }}.tar.gz
  sha256: 2c79a44a6ca90395cae41fb02f6bb73b85951a4760b71ebbf0e079da5fe519b5

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  skip: True  # [not win]

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('excel.link')"           # [not win]
    - "\"%R%\" -e \"library('excel.link')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/gdemin/excel.link
  license: GPL-2
  summary: Allows access to data in running instance of Microsoft Excel (e. g. 'xl[a1] = xl[b2]*3'
    and so on). Graphics can be transferred with 'xl[a1] = current.graphics()'. Additionally
    there are function for reading/writing  'Excel' files - 'xl.read.file'/'xl.save.file'.
    They are not fast but able to read/write  '*.xlsb'-files and password-protected
    files. There is an Excel workbook with  examples of calling R from Excel in the
    'doc' folder. It tries to keep things as simple as possible - there are no needs
    in any additional installations besides R, only 'VBA' code in the Excel workbook.
    Microsoft Excel is required for this package.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: excel.link
# Type: Package
# Title: Convenient Data Exchange with Microsoft Excel
# Version: 0.9.8-1
# Date: 2018-05-23
# Author: Gregory Demin <excel.link.feedback@gmail.com>. To comply CRAN policy includes source code from 'RDCOMClient' (http://www.omegahat.net/RDCOMClient) by Duncan Temple Lang <duncan@wald.ucdavis.edu>.
# Maintainer: Gregory Demin <excel.link.feedback@gmail.com>
# Depends: methods, grDevices, utils
# Suggests: knitr
# VignetteBuilder: knitr
# OS_type: windows
# Description: Allows access to data in running instance of Microsoft Excel (e. g. 'xl[a1] = xl[b2]*3' and so on). Graphics can be transferred with 'xl[a1] = current.graphics()'. Additionally there are function for reading/writing  'Excel' files - 'xl.read.file'/'xl.save.file'. They are not fast but able to read/write  '*.xlsb'-files and password-protected files. There is an Excel workbook with  examples of calling R from Excel in the 'doc' folder. It tries to keep things as simple as possible - there are no needs in any additional installations besides R, only 'VBA' code in the Excel workbook. Microsoft Excel is required for this package.
# License: GPL (>= 2)
# URL: https://github.com/gdemin/excel.link
# BugReports: https://github.com/gdemin/excel.link/issues
# LazyLoad: yes
# ByteCompile: TRUE
# NeedsCompilation: yes
# RoxygenNote: 6.0.1
# Packaged: 2018-05-23 12:02:51 UTC; demin
# Repository: CRAN
# Date/Publication: 2018-05-23 12:30:17 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
