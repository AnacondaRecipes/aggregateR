{% set version = '0.1.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-stochqn
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/stochQN_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/stochQN/stochQN_{{ version }}.tar.gz
  sha256: 2aa9c915b4c36f5e8e2a6313ad8add15bfb40f48be71c8df7a78de2c4be29dff

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('stochQN')"           # [not win]
    - "\"%R%\" -e \"library('stochQN')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/david-cortes/stochQN
  license: BSD_2_clause
  summary: 'Implementations of stochastic, limited-memory quasi-Newton optimizers, similar in
    spirit to the LBFGS (Limited-memory Broyden-Fletcher-Goldfarb-Shanno) algorithm,
    for smooth stochastic optimization. Implements the following methods: oLBFGS (online
    LBFGS) (Schraudolph, N.N., Yu, J. and Guenter, S., 2007 <http://proceedings.mlr.press/v2/schraudolph07a.html>),
    SQN (stochastic quasi-Newton) (Byrd, R.H., Hansen, S.L., Nocedal, J. and Singer,
    Y., 2016 <arXiv:1401.7020>), adaQN (adaptive quasi-Newton) (Keskar, N.S., Berahas,
    A.S., 2016, <arXiv:1511.01169>). Provides functions for easily creating R objects
    with partial_fit/predict methods from some given objective/gradient/predict functions.
    Includes an example stochastic logistic regression using these optimizers. Provides
    header files and registered C routines for using it directly from C/C++.'

  license_family: BSD
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/BSD_2_clause'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: stochQN
# Type: Package
# Title: Stochastic Limited Memory Quasi-Newton Optimizers
# Version: 0.1.2
# Date: 2019-09-03
# Author: David Cortes
# Maintainer: David Cortes <david.cortes.rivera@gmail.com>
# URL: https://github.com/david-cortes/stochQN
# BugReports: https://github.com/david-cortes/stochQN/issues
# Description: Implementations of stochastic, limited-memory quasi-Newton optimizers, similar in spirit to the LBFGS (Limited-memory Broyden-Fletcher-Goldfarb-Shanno) algorithm, for smooth stochastic optimization. Implements the following methods: oLBFGS (online LBFGS) (Schraudolph, N.N., Yu, J. and Guenter, S., 2007 <http://proceedings.mlr.press/v2/schraudolph07a.html>), SQN (stochastic quasi-Newton) (Byrd, R.H., Hansen, S.L., Nocedal, J. and Singer, Y., 2016 <arXiv:1401.7020>), adaQN (adaptive quasi-Newton) (Keskar, N.S., Berahas, A.S., 2016, <arXiv:1511.01169>). Provides functions for easily creating R objects with partial_fit/predict methods from some given objective/gradient/predict functions. Includes an example stochastic logistic regression using these optimizers. Provides header files and registered C routines for using it directly from C/C++.
# License: BSD_2_clause + file LICENSE
# NeedsCompilation: yes
# RoxygenNote: 6.1.1
# Packaged: 2019-09-03 16:58:15 UTC; david
# Repository: CRAN
# Date/Publication: 2019-09-05 02:10:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
