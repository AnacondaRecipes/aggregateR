{% set version = '3.2.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-httptest
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/httptest_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/httptest/httptest_{{ version }}.tar.gz
  sha256: 7880333c43df69ae2ac89d7360df94d065d9bdf824b32c7909ac415a228654e0

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: covr, knitr, rmarkdown, spelling, xml2
requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-digest
    - r-httr
    - r-jsonlite
    - r-testthat

  run:
    - r-base
    - r-digest
    - r-httr
    - r-jsonlite
    - r-testthat

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('httptest')"           # [not win]
    - "\"%R%\" -e \"library('httptest')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://enpiar.com/r/httptest, https://github.com/nealrichardson/httptest
  license: MIT
  summary: Testing and documenting code that communicates with remote servers can be painful.
    Dealing with authentication, server state, and other complications can make testing
    seem too costly to bother with. But it doesn't need to be that hard. This package
    enables one to test all of the logic on the R sides of the API in your package without
    requiring access to the remote service. Importantly, it provides three contexts
    that mock the network connection in different ways, as well as testing functions
    to assert that HTTP requests were---or were not---made. It also allows one to safely
    record real API responses to use as test fixtures. The ability to save responses
    and load them offline also enables one to write vignettes and other dynamic documents
    that can be distributed without access to a live server.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: httptest
# Type: Package
# Title: A Test Environment for HTTP Requests
# Description: Testing and documenting code that communicates with remote servers can be painful. Dealing with authentication, server state, and other complications can make testing seem too costly to bother with. But it doesn't need to be that hard. This package enables one to test all of the logic on the R sides of the API in your package without requiring access to the remote service. Importantly, it provides three contexts that mock the network connection in different ways, as well as testing functions to assert that HTTP requests were---or were not---made. It also allows one to safely record real API responses to use as test fixtures. The ability to save responses and load them offline also enables one to write vignettes and other dynamic documents that can be distributed without access to a live server.
# Version: 3.2.2
# Authors@R: person("Neal", "Richardson", role=c("aut", "cre"), email="neal.p.richardson@gmail.com")
# URL: https://enpiar.com/r/httptest, https://github.com/nealrichardson/httptest
# BugReports: https://github.com/nealrichardson/httptest/issues
# License: MIT + file LICENSE
# Depends: R (>= 3.0.0), testthat
# Imports: digest, httr, jsonlite, stats, utils
# Suggests: covr, knitr, rmarkdown, spelling, xml2
# Language: en-US
# RoxygenNote: 6.1.1
# VignetteBuilder: knitr
# NeedsCompilation: no
# Packaged: 2018-12-07 04:14:18 UTC; npr
# Author: Neal Richardson [aut, cre]
# Maintainer: Neal Richardson <neal.p.richardson@gmail.com>
# Repository: CRAN
# Date/Publication: 2018-12-07 05:30:11 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
