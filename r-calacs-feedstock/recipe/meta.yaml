{% set version = '2.2.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-calacs
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/calACS_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/calACS/calACS_{{ version }}.tar.gz
  sha256: 3c3829e6451e0551e9f882828eb38faf1a45a656f9977c3d587a4affb398a328

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('calACS')"           # [not win]
    - "\"%R%\" -e \"library('calACS')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=calACS
  license: GPL-3
  summary: Implements several string comparison algorithms, including calACS (count all common
    subsequences), lenACS (calculate the lengths of all common subsequences), and lenLCS
    (calculate the length of the longest common subsequence). Some algorithms differentiate
    between the more strict definition of subsequence, where a common subsequence cannot
    be separated by any other items, from its looser counterpart, where a common subsequence
    can be interrupted by other items. This difference is shown in the suffix of the
    algorithm (-Strict vs -Loose). For example, q-w is a common subsequence of q-w-e-r
    and q-e-w-r on the looser definition, but not on the more strict definition. calACSLoose
    Algorithm from Wang, H. All common subsequences (2007) IJCAI International Joint
    Conference on Artificial Intelligence, pp. 635-640.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: calACS
# Type: Package
# Title: Calculations for All Common Subsequences
# Version: 2.2.2
# Date: 2016-3-31
# Author: Alan Gu
# Maintainer: Alan Gu <alan.on.ca@gmail.com>
# Description: Implements several string comparison algorithms, including calACS (count all common subsequences), lenACS (calculate the lengths of all common subsequences), and lenLCS (calculate the length of the longest common subsequence). Some algorithms differentiate between the more strict definition of subsequence, where a common subsequence cannot be separated by any other items, from its looser counterpart, where a common subsequence can be interrupted by other items. This difference is shown in the suffix of the algorithm (-Strict vs -Loose). For example, q-w is a common subsequence of q-w-e-r and q-e-w-r on the looser definition, but not on the more strict definition. calACSLoose Algorithm from Wang, H. All common subsequences (2007) IJCAI International Joint Conference on Artificial Intelligence, pp. 635-640.
# License: GPL
# LazyData: TRUE
# RoxygenNote: 5.0.1
# NeedsCompilation: no
# Packaged: 2016-03-31 17:15:45 UTC; alano
# Repository: CRAN
# Date/Publication: 2016-03-31 19:35:54

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
