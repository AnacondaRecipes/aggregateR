{% set version = '1.3-3' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-distcomp
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/distcomp_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/distcomp/distcomp_{{ version }}.tar.gz
  sha256: 16ed1fe562c8a8c37b5982de40ee5bef282ed5fe8cc00c4c316b83353f630806

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: opencpu, knitr, covr, rmarkdown
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-r6 >=2.0
    - r-digest
    - r-dplyr
    - r-gmp
    - r-homomorpher
    - r-httr >=1.0.0
    - r-jsonlite
    - r-magrittr
    - r-rlang
    - r-shiny
    - r-stringr
    - r-survival

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-r6 >=2.0
    - r-digest
    - r-dplyr
    - r-gmp
    - r-homomorpher
    - r-httr >=1.0.0
    - r-jsonlite
    - r-magrittr
    - r-rlang
    - r-shiny
    - r-stringr
    - r-survival

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('distcomp')"           # [not win]
    - "\"%R%\" -e \"library('distcomp')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://dx.doi.org/10.18637/jss.v077.i13
  license: LGPL-2
  summary: 'Implementing algorithms and fitting models when sites (possibly remote) share computation
    summaries rather than actual data over HTTP with a master R process (using ''opencpu'',
    for example). A stratified Cox model and a singular value decomposition are provided.
    The former makes direct use of code from the R ''survival'' package. (That is, the
    underlying Cox model code is derived from that in the R ''survival'' package.) Sites
    may provide data via several means: CSV files, Redcap API, etc. An extensible design
    allows for new methods to be added in the future and includes facilities for local
    prototyping and testing. Web applications are provided (via ''shiny'') for the implemented
    methods to help in designing and deploying the computations.'
  license_family: LGPL
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/LGPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Title: Computations over Distributed Data without Aggregation
# Maintainer: Balasubramanian Narasimhan <naras@stat.Stanford.EDU>
# Package: distcomp
# Version: 1.3-3
# VignetteBuilder: knitr
# URL: http://dx.doi.org/10.18637/jss.v077.i13
# Depends: survival, stats, R (>= 3.5.0)
# Imports: utils, shiny, httr (>= 1.0.0), digest, jsonlite, stringr, R6 (>= 2.0), dplyr, rlang, magrittr, homomorpheR, gmp
# Suggests: opencpu, knitr, covr, rmarkdown
# Authors@R: c(person("Balasubramanian", "Narasimhan", role=c("aut", "cre"), email = "naras@stat.Stanford.EDU"), person("Marina", "Bendersky", role=c("aut")), person("Sam", "Gross", role=c("aut")), person(c("Terry", "M."), "Therneau", role=c("ctb")), person("Thomas", "Lumley", role=c("ctb")))
# Description: Implementing algorithms and fitting models when sites (possibly remote) share computation summaries rather than actual data over HTTP with a master R process (using 'opencpu', for example). A stratified Cox model and a singular value decomposition are provided. The former makes direct use of code from the R 'survival' package. (That is, the underlying Cox model code is derived from that in the R 'survival' package.) Sites may provide data via several means: CSV files, Redcap API, etc. An extensible design allows for new methods to be added in the future and includes facilities for local prototyping and testing. Web applications are provided (via 'shiny') for the implemented methods to help in designing and deploying the computations.
# Copyright: inst/COPYRIGHTS
# Encoding: UTF-8
# License: LGPL (>= 2)
# RoxygenNote: 7.2.1
# NeedsCompilation: yes
# Packaged: 2022-09-01 18:28:23 UTC; naras
# Author: Balasubramanian Narasimhan [aut, cre], Marina Bendersky [aut], Sam Gross [aut], Terry M. Therneau [ctb], Thomas Lumley [ctb]
# Repository: CRAN
# Date/Publication: 2022-09-01 21:00:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
