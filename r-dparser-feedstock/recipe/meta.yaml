{% set version = '1.3.1-10' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-dparser
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/dparser_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/dparser/dparser_{{ version }}.tar.gz
  sha256: ddc5e7eb217a28230294b75e819317c745609cc72ea56399291cc3c3dd933e0d

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: rex, covr, testthat, knitr, devtools
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-digest

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-digest

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('dparser')"           # [not win]
    - "\"%R%\" -e \"library('dparser')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://nlmixr2.github.io/dparser-R/, https://github.com/nlmixr2/dparser-R/
  license: BSD_3_clause
  summary: 'A Scannerless GLR parser/parser generator.  Note that GLR standing for "generalized
    LR", where L stands for "left-to-right" and R stands for "rightmost (derivation)".  For
    more information see <https://en.wikipedia.org/wiki/GLR_parser>. This parser is
    based on the Tomita (1987) algorithm. (Paper can be found at <https://aclanthology.org/P84-1073.pdf>).
    The original ''dparser'' package documentation can be found at <https://dparser.sourceforge.net/>.  This
    allows you to add mini-languages to R (like RxODE''s ODE mini-language Wang, Hallow,
    and James 2015 <DOI:10.1002/psp4.12052>) or to parse other languages like ''NONMEM''
    to automatically translate them to R code.   To use this in your code, add a LinkingTo
    dparser in your DESCRIPTION file and instead of using #include <dparse.h> use #include
    <dparser.h>.  This also provides a R-based port of the make_dparser <https://dparser.sourceforge.net/d/make_dparser.cat>
    command called mkdparser().  Additionally you can parse an arbitrary grammar within
    R using the dparse() function, which works on most OSes and is mainly for grammar
    testing.  The fastest parsing, of course, occurs at the C level, and is suggested.'
  license_family: BSD
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/BSD_3_clause'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: dparser
# Title: Port of 'Dparser' Package
# Version: 1.3.1-10
# Authors@R: c(person("Matthew", "Fidler", email = "matthew.fidler@gmail.com", role = c("aut", "cre")), person("John", "Plevyak", role = c("aut", "cph"), email = "jplevyak@gmail.com"))
# Imports: digest, methods
# Suggests: rex, covr, testthat, knitr, devtools
# Description: A Scannerless GLR parser/parser generator.  Note that GLR standing for "generalized LR", where L stands for "left-to-right" and R stands for "rightmost (derivation)".  For more information see <https://en.wikipedia.org/wiki/GLR_parser>. This parser is based on the Tomita (1987) algorithm. (Paper can be found at <https://aclanthology.org/P84-1073.pdf>). The original 'dparser' package documentation can be found at <https://dparser.sourceforge.net/>.  This allows you to add mini-languages to R (like RxODE's ODE mini-language Wang, Hallow, and James 2015 <DOI:10.1002/psp4.12052>) or to parse other languages like 'NONMEM' to automatically translate them to R code.   To use this in your code, add a LinkingTo dparser in your DESCRIPTION file and instead of using #include <dparse.h> use #include <dparser.h>.  This also provides a R-based port of the make_dparser <https://dparser.sourceforge.net/d/make_dparser.cat> command called mkdparser().  Additionally you can parse an arbitrary grammar within R using the dparse() function, which works on most OSes and is mainly for grammar testing.  The fastest parsing, of course, occurs at the C level, and is suggested.
# Depends: R (>= 3.3)
# License: BSD_3_clause + file LICENSE
# BugReports: https://github.com/nlmixr2/dparser-R/issues/
# URL: https://nlmixr2.github.io/dparser-R/, https://github.com/nlmixr2/dparser-R/
# Encoding: UTF-8
# RoxygenNote: 7.2.3
# NeedsCompilation: yes
# Packaged: 2023-03-16 04:14:01 UTC; matt
# Author: Matthew Fidler [aut, cre], John Plevyak [aut, cph]
# Maintainer: Matthew Fidler <matthew.fidler@gmail.com>
# Repository: CRAN
# Date/Publication: 2023-03-16 04:40:09 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
