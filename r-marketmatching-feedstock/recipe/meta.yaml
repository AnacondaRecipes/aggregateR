{% set version = '1.2.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-marketmatching
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/MarketMatching_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/MarketMatching/MarketMatching_{{ version }}.tar.gz
  sha256: 35a46f2240bfd835948ce6da4618a816d22c7674ac572741cf726b0d7554b51c

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, rmarkdown
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-boom
    - r-causalimpact
    - r-bsts
    - r-doparallel
    - r-dplyr
    - r-dtw
    - r-foreach
    - r-ggplot2
    - r-iterators
    - r-reshape2
    - r-scales
    - r-tidyr
    - r-utf8
    - r-zoo

  run:
    - r-base
    - r-boom
    - r-causalimpact
    - r-bsts
    - r-doparallel
    - r-dplyr
    - r-dtw
    - r-foreach
    - r-ggplot2
    - r-iterators
    - r-reshape2
    - r-scales
    - r-tidyr
    - r-utf8
    - r-zoo

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('MarketMatching')"           # [not win]
    - "\"%R%\" -e \"library('MarketMatching')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=MarketMatching
  license: GPL-3
  summary: For a given test market find the best control markets using time series matching and
    analyze the impact of an intervention. The intervention could be a marketing event
    or some other local business tactic that is being tested. The workflow implemented
    in the Market Matching package utilizes dynamic time warping (the 'dtw' package)
    to do the matching and the 'CausalImpact' package to analyze the causal impact.
    In fact, this package can be considered a "workflow wrapper" for those two packages.
    In addition, if you don't have a chosen set of test markets to match, the Market
    Matching package can provide suggested test/control market pairs and pseudo prospective
    power analysis (measuring causal impact at fake interventions).
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: MarketMatching
# Type: Package
# Title: Market Matching and Causal Impact Inference
# Version: 1.2.0
# Date: 2021-01-05
# Authors@R: person("Larsen", "Kim", email = "kblarsen4@gmail.com", role = c("aut", "cre"))
# Description: For a given test market find the best control markets using time series matching and analyze the impact of an intervention. The intervention could be a marketing event or some other local business tactic that is being tested. The workflow implemented in the Market Matching package utilizes dynamic time warping (the 'dtw' package) to do the matching and the 'CausalImpact' package to analyze the causal impact. In fact, this package can be considered a "workflow wrapper" for those two packages. In addition, if you don't have a chosen set of test markets to match, the Market Matching package can provide suggested test/control market pairs and pseudo prospective power analysis (measuring causal impact at fake interventions).
# Depends: R (>= 3.5.0)
# License: GPL (>= 3)
# Imports: ggplot2, dplyr, utils, iterators, doParallel, parallel, foreach, reshape2, CausalImpact, tidyr, zoo, bsts, scales, Boom, utf8, dtw
# LazyData: true
# VignetteBuilder: knitr
# Suggests: knitr, rmarkdown
# RoxygenNote: 7.1.1
# NeedsCompilation: no
# Packaged: 2021-01-08 18:31:02 UTC; kim.larsen
# Author: Larsen Kim [aut, cre]
# Maintainer: Larsen Kim <kblarsen4@gmail.com>
# Repository: CRAN
# Date/Publication: 2021-01-08 20:10:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
