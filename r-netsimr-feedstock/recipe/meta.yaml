{% set version = '0.1.3' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-netsimr
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/NetSimR_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/NetSimR/NetSimR_{{ version }}.tar.gz
  sha256: f70d203db5bcf7d820cf037cce9e74353e1e3505d49efd29a4404e92bea33783

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, crch, testthat
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-dbi
    - r-rmysql
    - r-rodbc
    - r-rpostgresql
    - r-rsqlite
    - r-future
    - r-future.apply
    - r-plotly
    - r-rmarkdown
    - r-scales
    - r-shiny
    - r-shinybusy
    - r-shinyjs

  run:
    - r-base
    - r-dbi
    - r-rmysql
    - r-rodbc
    - r-rpostgresql
    - r-rsqlite
    - r-future
    - r-future.apply
    - r-plotly
    - r-rmarkdown
    - r-scales
    - r-shiny
    - r-shinybusy
    - r-shinyjs

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('NetSimR')"           # [not win]
    - "\"%R%\" -e \"library('NetSimR')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=NetSimR
  license: GPL-3
  summary: Assists actuaries and other insurance modellers in pricing, reserving and capital
    modelling for non-life insurance and reinsurance modelling. Provides functions that
    help model excess levels, capping and pure Incurred but not reported claims (pure
    IBNR). Includes capped mean, exposure curves and increased limit factor curves (ILFs)
    for LogNormal, Gamma, Pareto, Sliced LogNormal-Pareto and Sliced Gamma-Pareto distributions.
    Includes mean, probability density function (pdf), cumulative probability function
    (cdf) and inverse cumulative probability function for Sliced LogNormal-Pareto and
    Sliced Gamma-Pareto distributions. Includes calculating pure IBNR exposure with
    LogNormal and Gamma distribution for reporting delay. Includes a shiny tool to simulate
    insurance claims.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: NetSimR
# Type: Package
# Title: Actuarial Functions for Non-Life Insurance Modelling
# Version: 0.1.3
# Author: Yiannis Parizas [aut, cre]
# Authors@R: person("Yiannis", "Parizas", email = "yiannis.parizas@gmail.com", role = c("aut", "cre"))
# Maintainer: Yiannis Parizas <yiannis.parizas@gmail.com>
# Description: Assists actuaries and other insurance modellers in pricing, reserving and capital modelling for non-life insurance and reinsurance modelling. Provides functions that help model excess levels, capping and pure Incurred but not reported claims (pure IBNR). Includes capped mean, exposure curves and increased limit factor curves (ILFs) for LogNormal, Gamma, Pareto, Sliced LogNormal-Pareto and Sliced Gamma-Pareto distributions. Includes mean, probability density function (pdf), cumulative probability function (cdf) and inverse cumulative probability function for Sliced LogNormal-Pareto and Sliced Gamma-Pareto distributions. Includes calculating pure IBNR exposure with LogNormal and Gamma distribution for reporting delay. Includes a shiny tool to simulate insurance claims.
# License: GPL-3
# Encoding: UTF-8
# Imports: rmarkdown, shiny, shinybusy, future.apply, scales, future, methods, DBI, RMySQL, RODBC, RPostgreSQL, RSQLite, plotly, shinyjs
# Suggests: knitr, crch, testthat
# VignetteBuilder: knitr
# RoxygenNote: 7.2.3
# NeedsCompilation: no
# Packaged: 2023-09-28 06:10:41 UTC; yiann
# Repository: CRAN
# Date/Publication: 2023-09-28 06:30:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
