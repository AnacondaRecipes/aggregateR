{% set version = '0.9.5' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-vapour
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/vapour_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/vapour/vapour_{{ version }}.tar.gz
  sha256: 1708fd7d15f511cdc27b652ec01708231eb8ad075655e3274afc34c846c79554

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, knitr, markdown, rmarkdown, spelling
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}sed               # [win]
    - {{ posix }}grep              # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake          # [not win]
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}pkg-config
    - {{ posix }}make
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]
    - libgdal

  host:
    - r-base
    - r-rcpp
    - r-jsonlite
    - r-nanoarrow
    - libgdal

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp
    - r-jsonlite
    - r-nanoarrow
    - libgdal

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('vapour')"           # [not win]
    - "\"%R%\" -e \"library('vapour')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/hypertidy/vapour
  license: GPL-3
  summary: Provides low-level access to 'GDAL' functionality. 'GDAL' is the 'Geospatial Data
    Abstraction Library' a translator for raster and vector geospatial data formats
    that presents a single raster abstract data model and single vector abstract data
    model to the calling application for all supported formats <https://gdal.org/>.
    This package is focussed on providing exactly and only what GDAL does, to enable
    developing further tools.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: vapour
# Title: Access to the 'Geospatial Data Abstraction Library' ('GDAL')
# Version: 0.9.5
# Authors@R: c(person("Michael", "Sumner", email = "mdsumner@gmail.com", role = c("aut", "cre"), comment = c(ORCID = "0000-0002-2471-7511")), person("Simon", "Wotherspoon", role = "ctb", comment = "RasterIO configuration for resampling options"), person("Mark", "Padgham", role = "ctb", comment = "helped get started :)"), person("Edzer", "Pebesma", role = "ctb", comment = "wrote the field-read handling, adapted here from sf"), person("Roger", "Bivand", role = "ctb", comment = "wrote configure.ac, adapted here from rgdal"), person("Jim", "Hester", role = c("ctb", "cph"), comment = "wrote CollectorList.h, copied here from fs package"), person("Timothy", "Keitt", role = c("ctb"), comment = "wrote GetPointsInternal copied here from rgdal2 package"), person("Jeroen", "Ooms", role = c("ctb"), comment = "tweaked build process, provided Windows build tools"), person("Dale", "Maschette", role = c("ctb"), comment = "created the hex logo"), person("Joseph", "Stachelek", role = "ctb"), person("Even", "Rouault", role = "ctb", comment = "primary author of the COG format and its use of the GDALwarp app-library, example code used by the warper function here"), person("Robert", "Hijmans", role = "ctb", comment = "code in terra package used as example/inspiration"), person("Dewey", "Dunnington", role = "ctb", comment = "wrote the columnar-access mode streaming Arrow support"))
# Description: Provides low-level access to 'GDAL' functionality. 'GDAL' is the 'Geospatial Data Abstraction Library' a translator for raster and vector geospatial data formats that presents a single raster abstract data model and single vector abstract data model to the calling application for all supported formats <https://gdal.org/>. This package is focussed on providing exactly and only what GDAL does, to enable developing further tools.
# Depends: R (>= 3.3.0)
# License: GPL-3
# Encoding: UTF-8
# LazyData: true
# LinkingTo: Rcpp
# Imports: jsonlite, nanoarrow, Rcpp, utils
# RoxygenNote: 7.2.3
# Suggests: testthat, knitr, markdown, rmarkdown, spelling
# SystemRequirements: libgdal-dev, GDAL (>= 2.2.3), PROJ (>= 4.8.0)
# VignetteBuilder: knitr
# URL: https://github.com/hypertidy/vapour
# BugReports: https://github.com/hypertidy/vapour/issues
# Language: en-US
# NeedsCompilation: yes
# Packaged: 2023-04-11 12:53:22 UTC; gdal
# Author: Michael Sumner [aut, cre] (<https://orcid.org/0000-0002-2471-7511>), Simon Wotherspoon [ctb] (RasterIO configuration for resampling options), Mark Padgham [ctb] (helped get started :)), Edzer Pebesma [ctb] (wrote the field-read handling, adapted here from sf), Roger Bivand [ctb] (wrote configure.ac, adapted here from rgdal), Jim Hester [ctb, cph] (wrote CollectorList.h, copied here from fs package), Timothy Keitt [ctb] (wrote GetPointsInternal copied here from rgdal2 package), Jeroen Ooms [ctb] (tweaked build process, provided Windows build tools), Dale Maschette [ctb] (created the hex logo), Joseph Stachelek [ctb], Even Rouault [ctb] (primary author of the COG format and its use of the GDALwarp app-library, example code used by the warper function here), Robert Hijmans [ctb] (code in terra package used as example/inspiration), Dewey Dunnington [ctb] (wrote the columnar-access mode streaming Arrow support)
# Maintainer: Michael Sumner <mdsumner@gmail.com>
# Repository: CRAN
# Date/Publication: 2023-04-11 14:00:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
