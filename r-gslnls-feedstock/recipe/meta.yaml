{% set version = '1.1.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-gslnls
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/gslnls_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/gslnls/gslnls_{{ version }}.tar.gz
  sha256: f531be3fba94f6e77daea41ba42de677353dc8a8315da3cc3dbea69165cbe174

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}sed               # [win]
    - {{ posix }}grep              # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake          # [not win]
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}pkg-config
    - {{ posix }}make
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-matrix

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-matrix

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('gslnls')"           # [not win]
    - "\"%R%\" -e \"library('gslnls')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/JorisChau/gslnls
  license: GPL-3
  summary: An R interface to nonlinear least-squares optimization with the GNU Scientific Library
    (GSL), see M. Galassi et al. (2009, ISBN:0954612078). The available trust region
    methods include the Levenberg-Marquardt algorithm with and without geodesic acceleration,
    the Steihaug-Toint conjugate gradient algorithm for large systems and several variants
    of Powell's dogleg algorithm. Bindings are provided to tune a number of parameters
    affecting the low-level aspects of the trust region algorithms. The interface mimics
    R's nls() function and returns model objects inheriting from the same class.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: gslnls
# Type: Package
# Title: GSL Nonlinear Least-Squares Fitting
# Version: 1.1.2
# Date: 2023-01-17
# Authors@R: person("Joris", "Chau", email = "joris.chau@openanalytics.eu", role = c("aut", "cre"))
# Description: An R interface to nonlinear least-squares optimization with the GNU Scientific Library (GSL), see M. Galassi et al. (2009, ISBN:0954612078). The available trust region methods include the Levenberg-Marquardt algorithm with and without geodesic acceleration, the Steihaug-Toint conjugate gradient algorithm for large systems and several variants of Powell's dogleg algorithm. Bindings are provided to tune a number of parameters affecting the low-level aspects of the trust region algorithms. The interface mimics R's nls() function and returns model objects inheriting from the same class.
# BugReports: https://github.com/JorisChau/gslnls/issues
# URL: https://github.com/JorisChau/gslnls
# Depends: R (>= 3.5)
# Imports: stats, Matrix
# Encoding: UTF-8
# Language: en-US
# License: GPL-3
# SystemRequirements: GSL (>= 2.2)
# RoxygenNote: 7.2.0
# NeedsCompilation: yes
# Packaged: 2023-01-17 10:31:13 UTC; jchau
# Author: Joris Chau [aut, cre]
# Maintainer: Joris Chau <joris.chau@openanalytics.eu>
# Repository: CRAN
# Date/Publication: 2023-01-17 15:20:05 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
