{% set version = '1.3-4' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-decon
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/decon_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/decon/decon_{{ version }}.tar.gz
  sha256: 1a035ea1c1137e1c26d91c03e17b4f82e572f38225c0d2c6155810c74dd9cc0c

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('fortran') }}        # [not win]
    - {{ compiler('m2w64_fortran') }}  # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('decon')"           # [not win]
    - "\"%R%\" -e \"library('decon')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=decon
  license: GPL-3
  summary: 'A collection of functions to deal with nonparametric measurement error problems using
    deconvolution kernel methods. We focus two measurement error models in the package:
    (1) an additive measurement error model, where the goal is to estimate the density
    or distribution function from contaminated data; (2) nonparametric regression model
    with errors-in-variables. The R functions allow the measurement errors to be either
    homoscedastic or heteroscedastic. To make the deconvolution estimators computationally
    more efficient in R, we adapt the "Fast Fourier Transform" (FFT) algorithm for density
    estimation with error-free data to the deconvolution kernel estimation. Several
    methods for the selection of the data-driven smoothing parameter are also provided
    in the package. See details in: Wang, X.F. and Wang, B. (2011). Deconvolution estimation
    in measurement error models: The R package decon. Journal of Statistical Software,
    39(10), 1-24.'
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: decon
# Type: Package
# Title: Deconvolution Estimation in Measurement Error Models
# Version: 1.3-4
# Date: 2021-10-20
# Author: Xiao-Feng Wang, Bin Wang
# Maintainer: Xiao-Feng Wang <wangx6@ccf.org>
# Description: A collection of functions to deal with nonparametric measurement error problems using deconvolution kernel methods. We focus two measurement error models in the package: (1) an additive measurement error model, where the goal is to estimate the density or distribution function from contaminated data; (2) nonparametric regression model with errors-in-variables. The R functions allow the measurement errors to be either homoscedastic or heteroscedastic. To make the deconvolution estimators computationally more efficient in R, we adapt the "Fast Fourier Transform" (FFT) algorithm for density estimation with error-free data to the deconvolution kernel estimation. Several methods for the selection of the data-driven smoothing parameter are also provided in the package. See details in: Wang, X.F. and Wang, B. (2011). Deconvolution estimation in measurement error models: The R package decon. Journal of Statistical Software, 39(10), 1-24.
# License: GPL (>= 3)
# Repository: CRAN
# Date/Publication: 2021-10-20 20:50:05 UTC
# Packaged: 2021-10-20 18:38:09 UTC; liangenwang
# NeedsCompilation: yes

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
