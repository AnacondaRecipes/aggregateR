{% set version = '0.2.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-varbin
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/varbin_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/varbin/varbin_{{ version }}.tar.gz
  sha256: 7892fbb018dc11223217bf378f3c9fdd52594f248c5df0c7a5f8f40d18b79e3d

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-rpart

  run:
    - r-base
    - r-rpart

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('varbin')"           # [not win]
    - "\"%R%\" -e \"library('varbin')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=varbin
  license: GPL-2
  summary: "Tool for easy and efficient discretization of continuous and categorical data.  The
    package calculates the most optimal binning of a given explanatory variable with
    respect to a  user-specified target variable. The purpose is to assign a unique
    Weight-of-Evidence value  to each of the calculated binpoints in order to recode
    the original variable.  The package allows users to impose certain restrictions
    on the functional form on the resulting  binning while maximizing the overall information
    value in the original data.  The package is well suited for logistic scoring models
    where input variables may be subject to  restrictions such as linearity by e.g.
    regulatory authorities. An excellent source describing in  detail the development
    of scorecards, and the role of Weight-of-Evidence coding in credit scoring  is (Siddiqi
    2006, ISBN: 978\u20130-471\u201375451\u20130). The package utilizes the discrete
    nature of decision trees and  Isotonic Regression to accommodate the trade-off between
    flexible functional forms and maximum  information value."

  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: varbin
# Type: Package
# Title: Optimal Binning of Continuous and Categorical Variables
# Version: 0.2.1
# Date: 2018-09-21
# Author: Daniel Safai
# Maintainer: Daniel Safai <danielsafai@gmail.com>
# Description: Tool for easy and efficient discretization of continuous and categorical data.  The package calculates the most optimal binning of a given explanatory variable with respect to a  user-specified target variable. The purpose is to assign a unique Weight-of-Evidence value  to each of the calculated binpoints in order to recode the original variable.  The package allows users to impose certain restrictions on the functional form on the resulting  binning while maximizing the overall information value in the original data.  The package is well suited for logistic scoring models where input variables may be subject to  restrictions such as linearity by e.g. regulatory authorities. An excellent source describing in  detail the development of scorecards, and the role of Weight-of-Evidence coding in credit scoring  is (Siddiqi 2006, ISBN: 9780-471754510). The package utilizes the discrete nature of decision trees and  Isotonic Regression to accommodate the trade-off between flexible functional forms and maximum  information value.
# License: GPL (>= 2)
# Imports: rpart
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 6.1.0
# NeedsCompilation: no
# Packaged: 2018-10-02 12:56:54 UTC; danielsafai
# Repository: CRAN
# Date/Publication: 2018-10-12 13:50:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
