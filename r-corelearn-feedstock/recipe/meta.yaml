{% set version = '1.53.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-corelearn
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/CORElearn_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/CORElearn/CORElearn_{{ version }}.tar.gz
  sha256: 3d9951dbfba0433f35f9f5db59d192f05ab24796d42a2e6cde5462aec4e05206

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: lattice,MASS,rpart.plot,ExplainPrediction
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}sed               # [win]
    - {{posix}}grep              # [win]
    - {{posix}}autoconf
    - {{posix}}automake          # [not win]
    - {{posix}}automake-wrapper  # [win]
    - {{posix}}pkg-config
    - {{posix}}make
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-cluster
    - r-nnet
    - r-rpart

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-cluster
    - r-nnet
    - r-rpart

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('CORElearn')"           # [not win]
    - "\"%R%\" -e \"library('CORElearn')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://lkm.fri.uni-lj.si/rmarko/software/
  license: GPL-3
  summary: A suite of machine learning algorithms written in C++ with the R  interface contains
    several learning techniques for classification and regression. Predictive models
    include e.g., classification and regression trees with optional constructive induction
    and models in the leaves, random forests, kNN,  naive Bayes, and locally weighted
    regression. All predictions obtained with these models can be explained and visualized
    with the 'ExplainPrediction' package.   This package is especially strong in feature
    evaluation where it contains several variants of Relief algorithm and many impurity
    based attribute evaluation functions, e.g., Gini,  information gain, MDL, and DKM.
    These methods can be used for feature selection  or discretization of numeric attributes.
    The OrdEval algorithm and its visualization is used for evaluation of data sets
    with ordinal features and class, enabling analysis according to the  Kano model
    of customer satisfaction.  Several algorithms support parallel multithreaded execution
    via OpenMP.   The top-level documentation is reachable through ?CORElearn.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: CORElearn
# Title: Classification, Regression and Feature Evaluation
# Version: 1.53.1
# Date: 2018-09-29
# Author: Marko Robnik-Sikonja and Petr Savicky
# Maintainer: "Marko Robnik-Sikonja" <marko.robnik@fri.uni-lj.si>
# Description: A suite of machine learning algorithms written in C++ with the R  interface contains several learning techniques for classification and regression. Predictive models include e.g., classification and regression trees with optional constructive induction and models in the leaves, random forests, kNN,  naive Bayes, and locally weighted regression. All predictions obtained with these models can be explained and visualized with the 'ExplainPrediction' package.   This package is especially strong in feature evaluation where it contains several variants of Relief algorithm and many impurity based attribute evaluation functions, e.g., Gini,  information gain, MDL, and DKM. These methods can be used for feature selection  or discretization of numeric attributes. The OrdEval algorithm and its visualization is used for evaluation of data sets with ordinal features and class, enabling analysis according to the  Kano model of customer satisfaction.  Several algorithms support parallel multithreaded execution via OpenMP.   The top-level documentation is reachable through ?CORElearn.
# License: GPL-3
# URL: http://lkm.fri.uni-lj.si/rmarko/software/
# Imports: cluster,rpart, stats,nnet
# Suggests: lattice,MASS,rpart.plot,ExplainPrediction
# NeedsCompilation: yes
# Packaged: 2018-09-29 10:05:52 UTC; rmarko
# Repository: CRAN
# Date/Publication: 2018-09-29 10:30:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
