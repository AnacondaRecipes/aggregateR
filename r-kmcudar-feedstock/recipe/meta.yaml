{% set version = '1.1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-kmcudar
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/kmcudaR_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/kmcudaR/kmcudaR_{{ version }}.tar.gz
  sha256: 7a85b704cfa7014db5cc49df7803dcdd4eb3cf5b53613b04fbe58cf254dab399

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  skip: True  # [not unix]

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}sed               # [win]
    - {{posix}}grep              # [win]
    - {{posix}}autoconf
    - {{posix}}automake          # [not win]
    - {{posix}}automake-wrapper  # [win]
    - {{posix}}pkg-config
    - {{posix}}make
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.9
    - r-rcppeigen

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.12.9
    - r-rcppeigen

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('kmcudaR')"           # [not win]
    - "\"%R%\" -e \"library('kmcudaR')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=kmcudaR
  license: Apache License (>= 2.0) | file LICENSE
  summary: 'K-means implementation is base on "Yingyang K-Means: A Drop-In Replacement of the
    Classic K-Means with Consistent Speedup". While it introduces some overhead and
    many conditional clauses which are bad for CUDA, it still shows 1.6-2x speedup against
    the Lloyd algorithm.  K-nearest neighbors employ the same triangle inequality idea
    and require precalculated centroids and cluster assignments, similar to the flattened
    ball tree. '

  license_family: APACHE
  license_file:
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: kmcudaR
# Type: Package
# Title: 'Yingyang' K-Means and K-NN using NVIDIA CUDA
# Version: 1.1.0
# Date: 2019-03-18
# Author: Vadim Markovtsev, Charles Determan
# Maintainer: Charles Determan <cdetermanjr@gmail.com>
# Description: K-means implementation is base on "Yingyang K-Means: A Drop-In Replacement of the Classic K-Means with Consistent Speedup". While it introduces some overhead and many conditional clauses which are bad for CUDA, it still shows 1.6-2x speedup against the Lloyd algorithm.  K-nearest neighbors employ the same triangle inequality idea and require precalculated centroids and cluster assignments, similar to the flattened ball tree.
# License: Apache License (>= 2.0) | file LICENSE
# Depends: R (>= 3.3.2)
# Imports: Rcpp (>= 0.12.9)
# LinkingTo: Rcpp, RcppEigen
# OS_type: unix
# Suggests: testthat
# RoxygenNote: 6.1.1
# SystemRequirements: CUDA 8.0 tookit, OpenMP 4.0 capable compiler
# NeedsCompilation: yes
# Packaged: 2019-03-21 17:09:11 UTC; y66534
# Repository: CRAN
# Date/Publication: 2019-03-22 10:00:07 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
