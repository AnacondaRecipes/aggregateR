{% set version = '2.8.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rcppalgos
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/RcppAlgos_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/RcppAlgos/RcppAlgos_{{ version }}.tar.gz
  sha256: ffafe4fbf56b49d54b70fe5283dde01dcc0d7ba49e0905d86e079b73507e33c1

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, partitions, microbenchmark, knitr, RcppBigIntAlgos, rmarkdown
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-cpp11
    - r-gmp
    - gmp

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-cpp11
    - r-gmp
    - gmp

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('RcppAlgos')"           # [not win]
    - "\"%R%\" -e \"library('RcppAlgos')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/jwood000/RcppAlgos, https://gmplib.org/, https://github.com/kimwalisch/primesieve,
    https://libdivide.com, https://github.com/kimwalisch/primecount, https://ridiculousfish.com/,
    https://sweet.ua.pt/tos/software/prime_sieve.html
  license: GPL-2
  summary: "Provides optimized functions and flexible combinatorial iterators implemented in
    C++ for solving problems in combinatorics and computational mathematics. Utilizes
    the RMatrix class from 'RcppParallel' for thread safety. There are combination/permutation
    functions with constraint parameters that allow for generation of all results of
    a vector meeting specific criteria (e.g. generating integer partitions/compositions
    or finding all combinations such that the sum is between two bounds). Capable of
    generating specific combinations/permutations (e.g. retrieve only the nth lexicographical
    result) which sets up nicely for parallelization as well as random sampling. Gmp
    support permits exploration where the total number of results is large (e.g. comboSample(10000,
    500, n = 4)). Additionally, there are several high performance number theoretic
    functions that are useful for problems common in computational mathematics. Some
    of these functions make use of the fast integer division library 'libdivide'. The
    primeSieve function is based on the segmented sieve of Eratosthenes implementation
    by Kim Walisch. It is also efficient for large numbers by using the cache friendly
    improvements originally developed by Tom\xE1s Oliveira. Finally, there is a prime
    counting function that implements Legendre's formula based on the work of Kim Walisch."
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

# The original CRAN metadata for this package was:

# Package: RcppAlgos
# Version: 2.8.2
# Title: High Performance Tools for Combinatorics and Computational Mathematics
# Description: Provides optimized functions and flexible combinatorial iterators implemented in C++ for solving problems in combinatorics and computational mathematics. Utilizes the RMatrix class from 'RcppParallel' for thread safety. There are combination/permutation functions with constraint parameters that allow for generation of all results of a vector meeting specific criteria (e.g. generating integer partitions/compositions or finding all combinations such that the sum is between two bounds). Capable of generating specific combinations/permutations (e.g. retrieve only the nth lexicographical result) which sets up nicely for parallelization as well as random sampling. Gmp support permits exploration where the total number of results is large (e.g. comboSample(10000, 500, n = 4)). Additionally, there are several high performance number theoretic functions that are useful for problems common in computational mathematics. Some of these functions make use of the fast integer division library 'libdivide'. The primeSieve function is based on the segmented sieve of Eratosthenes implementation by Kim Walisch. It is also efficient for large numbers by using the cache friendly improvements originally developed by Tomas Oliveira. Finally, there is a prime counting function that implements Legendre's formula based on the work of Kim Walisch.
# URL: https://github.com/jwood000/RcppAlgos, https://gmplib.org/, https://github.com/kimwalisch/primesieve, https://libdivide.com, https://github.com/kimwalisch/primecount, https://ridiculousfish.com/, https://sweet.ua.pt/tos/software/prime_sieve.html
# BugReports: https://github.com/jwood000/RcppAlgos/issues
# LinkingTo: cpp11
# Imports: gmp, methods
# Suggests: testthat, partitions, microbenchmark, knitr, RcppBigIntAlgos, rmarkdown
# License: GPL (>= 2)
# SystemRequirements: gmp (>= 4.2.3)
# VignetteBuilder: knitr
# NeedsCompilation: yes
# Author: Joseph Wood
# Maintainer: Joseph Wood <jwood000@gmail.com>
# Encoding: UTF-8
# RoxygenNote: 7.2.3
# Packaged: 2023-10-02 21:52:33 UTC; josephwood
# Repository: CRAN
# Date/Publication: 2023-10-02 23:50:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
