{% set version = '0.4.3' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-hal9001
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/hal9001_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/hal9001/hal9001_{{ version }}.tar.gz
  sha256: f2489e7a0a16db6dc65da8ce13bfb7f0854e6f303c9ec05f6158d46c66b6588c

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, knitr, rmarkdown, microbenchmark, future, ggplot2, dplyr, tidyr, survival, SuperLearner
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-matrix
    - r-rcpp
    - r-rcppeigen
    - r-assertthat
    - r-data.table
    - r-glmnet
    - r-origami >=1.0.3
    - r-stringr

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-matrix
    - r-rcpp
    - r-rcppeigen
    - r-assertthat
    - r-data.table
    - r-glmnet
    - r-origami >=1.0.3
    - r-stringr

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('hal9001')"           # [not win]
    - "\"%R%\" -e \"library('hal9001')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/tlverse/hal9001
  license: GPL-3
  summary: A scalable implementation of the highly adaptive lasso algorithm, including routines
    for constructing sparse matrices of basis functions of the observed data, as well
    as a custom implementation of Lasso regression tailored to enhance efficiency when
    the matrix of predictors is composed exclusively of indicator functions. For ease
    of use and increased flexibility, the Lasso fitting routines invoke code from the
    'glmnet' package by default. The highly adaptive lasso was first formulated and
    described by MJ van der Laan (2017) <doi:10.1515/ijb-2015-0097>, with practical
    demonstrations of its performance given by Benkeser and van der Laan (2016) <doi:10.1109/DSAA.2016.93>.
    This implementation of the highly adaptive lasso algorithm was described by Hejazi,
    Coyle, and van der Laan (2020) <doi:10.21105/joss.02526>.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: hal9001
# Title: The Scalable Highly Adaptive Lasso
# Version: 0.4.3
# Authors@R: c( person("Jeremy", "Coyle", email = "jeremyrcoyle@gmail.com", role = c("aut", "cre"), comment = c(ORCID = "0000-0002-9874-6649")), person("Nima", "Hejazi", email = "nh@nimahejazi.org", role = "aut", comment = c(ORCID = "0000-0002-7127-2789")), person("Rachael", "Phillips", email = "rachaelvphillips@berkeley.edu", role = "aut", comment = c(ORCID = "0000-0002-8474-591X")), person("Lars", "van der Laan", email = "vanderlaanlars@yahoo.com", role = "aut"), person("David", "Benkeser", email = "benkeser@emory.edu", role = "ctb", comment = c(ORCID = "0000-0002-1019-8343")), person("Oleg", "Sofrygin", email = "oleg.sofrygin@gmail.com", role = "ctb"), person("Weixin", "Cai", email = "wcai@berkeley.edu", role = "ctb", comment = c(ORCID = "0000-0003-2680-3066")), person("Mark", "van der Laan", email = "laan@berkeley.edu", role = c("aut", "cph", "ths"), comment = c(ORCID = "0000-0003-1432-5511")) )
# Description: A scalable implementation of the highly adaptive lasso algorithm, including routines for constructing sparse matrices of basis functions of the observed data, as well as a custom implementation of Lasso regression tailored to enhance efficiency when the matrix of predictors is composed exclusively of indicator functions. For ease of use and increased flexibility, the Lasso fitting routines invoke code from the 'glmnet' package by default. The highly adaptive lasso was first formulated and described by MJ van der Laan (2017) <doi:10.1515/ijb-2015-0097>, with practical demonstrations of its performance given by Benkeser and van der Laan (2016) <doi:10.1109/DSAA.2016.93>. This implementation of the highly adaptive lasso algorithm was described by Hejazi, Coyle, and van der Laan (2020) <doi:10.21105/joss.02526>.
# Depends: R (>= 3.1.0), Rcpp
# License: GPL-3
# URL: https://github.com/tlverse/hal9001
# BugReports: https://github.com/tlverse/hal9001/issues
# Encoding: UTF-8
# LazyData: true
# Imports: Matrix, stats, utils, methods, assertthat, origami (>= 1.0.3), glmnet, data.table, stringr
# Suggests: testthat, knitr, rmarkdown, microbenchmark, future, ggplot2, dplyr, tidyr, survival, SuperLearner
# LinkingTo: Rcpp, RcppEigen
# VignetteBuilder: knitr
# RoxygenNote: 7.1.2
# NeedsCompilation: yes
# Packaged: 2022-02-09 21:49:31 UTC; nsh
# Author: Jeremy Coyle [aut, cre] (<https://orcid.org/0000-0002-9874-6649>), Nima Hejazi [aut] (<https://orcid.org/0000-0002-7127-2789>), Rachael Phillips [aut] (<https://orcid.org/0000-0002-8474-591X>), Lars van der Laan [aut], David Benkeser [ctb] (<https://orcid.org/0000-0002-1019-8343>), Oleg Sofrygin [ctb], Weixin Cai [ctb] (<https://orcid.org/0000-0003-2680-3066>), Mark van der Laan [aut, cph, ths] (<https://orcid.org/0000-0003-1432-5511>)
# Maintainer: Jeremy Coyle <jeremyrcoyle@gmail.com>
# Repository: CRAN
# Date/Publication: 2022-02-09 22:50:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
