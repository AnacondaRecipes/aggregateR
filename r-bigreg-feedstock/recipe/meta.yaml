{% set version = '0.1.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-bigreg
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/bigReg_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/bigReg/bigReg_{{ version }}.tar.gz
  sha256: 7cdcac717f88ba597b03e6cded03392b237de19db1428498f9ff7e406481bbc2

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # claims to be unix only package
  skip: True  # [win]

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-mass >=7.3_39
    - r-rcpp >=0.12.3
    - r-rcpparmadillo >=0.5.200.1.0
    - r-uuid >=0.1_2

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-mass >=7.3_39
    - r-rcpp >=0.12.3
    - r-rcpparmadillo >=0.5.200.1.0
    - r-uuid >=0.1_2

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('bigReg')"           # [not win]
    - "\"%R%\" -e \"library('bigReg')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=bigReg
  license: GPL-2
  summary: Allows the user to carry out GLM on very large data sets. Data can be created using
    the data_frame() function and appended to the object with object$append(data); data_frame
    and data_matrix objects are available that allow the user to store large data on
    disk. The data is stored as doubles in binary format and any character columns are
    transformed to factors and then stored as numeric (binary) data while a look-up
    table is stored in a separate .meta_data file in the same folder. The data is stored
    in blocks and GLM regression algorithm is modified and carries out a MapReduce-
    like algorithm to fit the model. The functions bglm(), and summary() and bglm_predict()
    are available for creating and post-processing of models. The library requires Armadillo
    installed on your system. It probably won't  function on windows since multi-core
    processing is done using mclapply()  which forks R on Unix/Linux type operating
    systems.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: bigReg
# Type: Package
# Title: Generalized Linear Models (GLM) for Large Data Sets
# Version: 0.1.2
# Date: 2016-07-23
# Author: Chibisi Chima-Okereke <chibisi@active-analytics.com>
# Maintainer: Chibisi Chima-Okereke <chibisi@active-analytics.com>
# Description: Allows the user to carry out GLM on very large data sets. Data can be created using the data_frame() function and appended to the object with object$append(data); data_frame and data_matrix objects are available that allow the user to store large data on disk. The data is stored as doubles in binary format and any character columns are transformed to factors and then stored as numeric (binary) data while a look-up table is stored in a separate .meta_data file in the same folder. The data is stored in blocks and GLM regression algorithm is modified and carries out a MapReduce- like algorithm to fit the model. The functions bglm(), and summary() and bglm_predict() are available for creating and post-processing of models. The library requires Armadillo installed on your system. It probably won't  function on windows since multi-core processing is done using mclapply()  which forks R on Unix/Linux type operating systems.
# License: GPL (>= 2)
# Depends: R (>= 3.2.0), Rcpp (>= 0.12.3), parallel, methods, stats, uuid (>= 0.1-2), MASS (>= 7.3-39)
# LinkingTo: Rcpp, RcppArmadillo (>= 0.5.200.1.0)
# OS_type: unix
# Collate: 'RcppExports.R' 'data_frame.r' 'data_matrix.r' 'family.r' 'map_reg.r'
# RoxygenNote: 5.0.1
# NeedsCompilation: yes
# Packaged: 2016-07-25 09:31:12 UTC; chib
# Repository: CRAN
# Date/Publication: 2016-07-25 19:16:58

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
