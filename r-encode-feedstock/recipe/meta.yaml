{% set version = '0.3.6' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-encode
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/encode_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/encode/encode_{{ version }}.tar.gz
  sha256: ccff419d21d952e4e2d85d4d6ff19cb02bf264ca0ef3732a297d69852b65fc13

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: magrittr
requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('encode')"           # [not win]
    - "\"%R%\" -e \"library('encode')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=encode
  license: GPL-3
  summary: Interconverts between ordered lists and compact string notation.   Useful for capturing
    code lists, and pair-wise codes and decodes, for text storage. Analogous to factor
    levels and labels. Generics encode() and decode() perform interconversion, while
    codes() and decodes() extract components of an encoding. The function encoded()
    checks whether something is interpretable as an encoding. If a vector has an encoded
    'guide' attribute, as_factor() uses it to coerce to factor.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: encode
# Type: Package
# Title: Represent Ordered Lists and Pairs as Strings
# Version: 0.3.6
# Author: Tim Bergsma
# Maintainer: Tim Bergsma <bergsmat@gmail.com>
# Description: Interconverts between ordered lists and compact string notation.   Useful for capturing code lists, and pair-wise codes and decodes, for text storage. Analogous to factor levels and labels. Generics encode() and decode() perform interconversion, while codes() and decodes() extract components of an encoding. The function encoded() checks whether something is interpretable as an encoding. If a vector has an encoded 'guide' attribute, as_factor() uses it to coerce to factor.
# License: GPL-3
# LazyData: TRUE
# Imports:
# Suggests: magrittr
# RoxygenNote: 6.0.1
# NeedsCompilation: no
# Packaged: 2019-04-24 14:34:29 UTC; tbergsma
# Repository: CRAN
# Date/Publication: 2019-04-25 12:10:09 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
