cran_mirror:
  - https://cran.r-project.org
CONDA_BUILD_SYSROOT:
  - /opt/MacOSX10.10.sdk        # [osx and x86_64]
  - /Library/Developer/CommandLineTools/SDKs/MacOSX11.1.sdk  # [osx and arm64]
VERBOSE_AT:
  - V=1
VERBOSE_CM:
  - VERBOSE=1
macos_min_version:
  - 10.9
macos_machine:
  - x86_64-apple-darwin13.4.0  # [osx and x86_64]
  - arm64-apple-darwin20.0.0   # [osx and arm64]
MACOSX_DEPLOYMENT_TARGET:
  - 10.9  # [osx and x86_64]
  - 11.1  # [osx and arm64]
python:
  - 3.8
  - 3.9
  - "3.10"
  - "3.11"
openblas:
  - 0.3.21
cairo:
  - 1.16
c_compiler:
  - gcc                        # [linux]
  - clang                      # [osx]
  - vs2017                     # [win]
cxx_compiler:
  - gxx                        # [linux]
  - clangxx                    # [osx]
  - vs2017                     # [win]
c_compiler_version:            # [linux or osx]
  - 11.2.0                     # [linux]
  - 14                         # [osx]
cxx_compiler_version:          # [linux or osx]
  - 11.2.0                     # [linux]
  - 14                         # [osx]
fortran_compiler:
  - gfortran                   # [linux or osx]
  - intel-fortran              # [win]
fortran_compiler_version:
  - 2022.1.0                   # [win]
  - 11.2.0                     # [osx or linux]
m2w64_c_compiler:              # [win]
  - m2w64-toolchain            # [win]
m2w64_cxx_compiler:            # [win]
  - m2w64-toolchain            # [win]
m2w64_fortran_compiler:        # [win]
  - m2w64-toolchain            # [win]


# This differs from target_platform in that it determines what subdir the compiler
#    will target, not what subdir the compiler package will be itself.
#    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
#    code on win-64 miniconda.
cross_compiler_target_platform:
  - win-64                     # [win]
#  - win-32                     # [win]
target_platform:
  - win-64                     # [win]
#  - win-32                     # [win]
rstudio_variant:
  - ''
#  - '-server'
