{% set version = '0.3.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-gptstudio
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/gptstudio_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/gptstudio/gptstudio_{{ version }}.tar.gz
  sha256: bfab399e43cee44152797ac82d6c128403598dd9248f51d3aeac2614cec46094

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: mockr, shinytest2, spelling, testthat (>= 3.0.0), uuid, withr
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-assertthat
    - r-bslib >=0.4.2
    - r-callr
    - r-cli
    - r-colorspace
    - r-glue
    - r-htmltools
    - r-htmlwidgets
    - r-httr2
    - r-jsonlite
    - r-magrittr
    - r-purrr
    - r-rlang
    - r-rstudioapi >=0.12
    - r-shiny
    - r-shiny.i18n
    - r-stringr >=1.5.0
    - r-waiter
    - r-yaml

  run:
    - r-base
    - r-assertthat
    - r-bslib >=0.4.2
    - r-callr
    - r-cli
    - r-colorspace
    - r-glue
    - r-htmltools
    - r-htmlwidgets
    - r-httr2
    - r-jsonlite
    - r-magrittr
    - r-purrr
    - r-rlang
    - r-rstudioapi >=0.12
    - r-shiny
    - r-shiny.i18n
    - r-stringr >=1.5.0
    - r-waiter
    - r-yaml

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('gptstudio')"           # [not win]
    - "\"%R%\" -e \"library('gptstudio')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/MichelNivard/gptstudio, https://michelnivard.github.io/gptstudio/
  license: MIT
  summary: Large language models are readily accessible via API. This package lowers the barrier
    to use the API inside of your development environment.  For more on the API, see
    <https://platform.openai.com/docs/introduction>.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

# The original CRAN metadata for this package was:

# Type: Package
# Package: gptstudio
# Title: Use Large Language Models Directly in your Development Environment
# Version: 0.3.0
# Authors@R: c( person("Michel", "Nivard", , "m.g.nivard@vu.nl", role = c("aut", "cph")), person("James", "Wade", , "github@jameshwade.com", role = c("aut", "cre", "cph"), comment = c(ORCID = "0000-0002-9740-1905")), person("Samuel", "Calderon", , "samuel.calderon@uarm.pe", role = "aut", comment = c(ORCID = "0000-0001-6847-1210")) )
# Maintainer: James Wade <github@jameshwade.com>
# Description: Large language models are readily accessible via API. This package lowers the barrier to use the API inside of your development environment.  For more on the API, see <https://platform.openai.com/docs/introduction>.
# License: MIT + file LICENSE
# URL: https://github.com/MichelNivard/gptstudio, https://michelnivard.github.io/gptstudio/
# BugReports: https://github.com/MichelNivard/gptstudio/issues
# Imports: assertthat, bslib (>= 0.4.2), callr, cli, colorspace, glue, grDevices, htmltools, htmlwidgets, httr2, jsonlite, magrittr, purrr, rlang, rstudioapi (>= 0.12), shiny, shiny.i18n, stringr (>= 1.5.0), utils, waiter, yaml
# Suggests: mockr, shinytest2, spelling, testthat (>= 3.0.0), uuid, withr
# Depends: R (>= 4.0)
# Config/testthat/edition: 3
# Config/testthat/parallel: true
# Encoding: UTF-8
# Language: en-US
# RoxygenNote: 7.2.3
# NeedsCompilation: no
# Packaged: 2023-07-11 00:28:26 UTC; james
# Author: Michel Nivard [aut, cph], James Wade [aut, cre, cph] (<https://orcid.org/0000-0002-9740-1905>), Samuel Calderon [aut] (<https://orcid.org/0000-0001-6847-1210>)
# Repository: CRAN
# Date/Publication: 2023-07-11 12:00:16 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
