{% set version = '0.26' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-sbrect
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/SBRect_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/SBRect/SBRect_{{ version }}.tar.gz
  sha256: 24f66b8ae40623bf40d4228fe0d49081d0ad2888667444f5f539269c7c64e099

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: MASS
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rjava
    - openjdk  # [linux]

  run:
    - r-base
    - r-rjava

test:
  requires:
    - openjdk  # [linux]
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('SBRect')"           # [not win]
    - "\"%R%\" -e \"library('SBRect')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://www2.imm.dtu.dk/~pafi/StructBreak/index.html
  license: GPL-2
  summary: The package uses fitting axes-aligned rectangles to a time series in order to find
    structural breaks. The algorithm enclose the time series in a number of axes-aligned
    rectangles and tries to minimize their area and number. As these are conflicting
    aims, the user has to specify a parameter alpha in [0.0,1.0]. Values close to 0
    result in more breakpoints, values close to 1 in fewer. The left edges of the rectangles
    are the breakpoints. The package supplies two  methods, computeBreakPoints(series,alpha)
    which returns the indices of the break points and computeRectangles(series,alpha)
    which returns the rectangles. The algorithm is randomised; it uses a genetic algorithm.
    Therefore, the break point sequence found can be different in different executions
    of the method on the same data, especially when used on  longer series of some thousand
    observations. The algorithm uses a range-tree as background data structure which
    makes i very fast and suited to analyse series with millions of observations. A
    detailed description can be found in Paul Fischer, Astrid Hilbert, Fast detection  of
    structural breaks, Proceedings of Compstat 2014.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: SBRect
# Version: 0.26
# Date: 2014-02-07
# Title: Detecting structural breaks using rectangle covering (non-parametric method).
# Authors@R: c(person("Paul", "Fischer", role = c("aut", "cre","cph"), email = "pafi@dtu.dk"),person("Astrid", "Hilbert", role = c("ctb","cph"), email = "astrid.hilbert@lnu.se"))
# Author: Paul Fischer [aut, cre, cph], Astrid Hilbert [ctb, cph]
# Maintainer: Paul Fischer <pafi@dtu.dk>
# Depends: rJava
# SystemRequirements: java
# Suggests: MASS
# Description: The package uses fitting axes-aligned rectangles to a time series in order to find structural breaks. The algorithm enclose the time series in a number of axes-aligned rectangles and tries to minimize their area and number. As these are conflicting aims, the user has to specify a parameter alpha in [0.0,1.0]. Values close to 0 result in more breakpoints, values close to 1 in fewer. The left edges of the rectangles are the breakpoints. The package supplies two  methods, computeBreakPoints(series,alpha) which returns the indices of the break points and computeRectangles(series,alpha) which returns the rectangles. The algorithm is randomised; it uses a genetic algorithm. Therefore, the break point sequence found can be different in different executions of the method on the same data, especially when used on  longer series of some thousand observations. The algorithm uses a range-tree as background data structure which makes i very fast and suited to analyse series with millions of observations. A detailed description can be found in Paul Fischer, Astrid Hilbert, Fast detection  of structural breaks, Proceedings of Compstat 2014.
# License: GPL-2
# URL: http://www2.imm.dtu.dk/~pafi/StructBreak/index.html
# BugReports: pafi@dtu.dk
# Packaged: 2014-07-20 18:56:52 UTC; Paul
# NeedsCompilation: no
# Repository: CRAN
# Date/Publication: 2014-07-20 21:17:32

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
