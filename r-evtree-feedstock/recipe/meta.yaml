{% set version = '1.0-8' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-evtree
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/evtree_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/evtree/evtree_{{ version }}.tar.gz
  sha256: 33ecd68b1e60022832fc11ca4913a46744e54f7d15ffcef0ff9ca397bd5ebfb6

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: Formula, kernlab, lattice, mlbench, multcomp, party, rpart, xtable
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-partykit

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-partykit

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('evtree')"           # [not win]
    - "\"%R%\" -e \"library('evtree')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=evtree
  license: GPL-2 | GPL-3
  summary: Commonly used classification and regression tree methods like the CART algorithm are
    recursive partitioning methods that build the model in a forward stepwise search.
    Although this approach is known to be an efficient heuristic, the results of recursive
    tree methods are only locally optimal, as splits are chosen to maximize homogeneity
    at the next step only. An alternative way to search over the parameter space of
    trees is to use global optimization methods like evolutionary algorithms. The 'evtree'
    package implements an evolutionary algorithm for learning globally optimal classification
    and regression trees in R. CPU and memory-intensive tasks are fully computed in
    C++ while the 'partykit' package is leveraged to represent the resulting trees in
    R, providing unified infrastructure for summaries, visualizations, and predictions.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: evtree
# Title: Evolutionary Learning of Globally Optimal Trees
# Version: 1.0-8
# Date: 2019-05-19
# Authors@R: c(person(given = "Thomas", family = "Grubinger", role = c("aut", "cre"), email = "ThomasGrubinger@gmail.com"), person(given = "Achim", family = "Zeileis", role = "aut", email = "Achim.Zeileis@R-project.org", comment = c(ORCID = "0000-0003-0918-3766")), person(given = "Karl-Peter", family = "Pfeiffer", role = "aut", email = "Karl-Peter.Pfeiffer@i-med.ac.at"))
# Description: Commonly used classification and regression tree methods like the CART algorithm are recursive partitioning methods that build the model in a forward stepwise search. Although this approach is known to be an efficient heuristic, the results of recursive tree methods are only locally optimal, as splits are chosen to maximize homogeneity at the next step only. An alternative way to search over the parameter space of trees is to use global optimization methods like evolutionary algorithms. The 'evtree' package implements an evolutionary algorithm for learning globally optimal classification and regression trees in R. CPU and memory-intensive tasks are fully computed in C++ while the 'partykit' package is leveraged to represent the resulting trees in R, providing unified infrastructure for summaries, visualizations, and predictions.
# Depends: R (>= 3.3.0), partykit
# Suggests: Formula, kernlab, lattice, mlbench, multcomp, party, rpart, xtable
# LazyData: yes
# License: GPL-2 | GPL-3
# Author: Thomas Grubinger [aut, cre], Achim Zeileis [aut] (<https://orcid.org/0000-0003-0918-3766>), Karl-Peter Pfeiffer [aut]
# Maintainer: Thomas Grubinger <ThomasGrubinger@gmail.com>
# Repository: CRAN
# Repository/R-Forge/Project: partykit
# Repository/R-Forge/Revision: 2594
# Repository/R-Forge/DateTimeStamp: 2019-05-26 18:21:12
# Date/Publication: 2019-05-26 19:40:04 UTC
# NeedsCompilation: yes
# Packaged: 2019-05-26 18:33:33 UTC; rforge

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
