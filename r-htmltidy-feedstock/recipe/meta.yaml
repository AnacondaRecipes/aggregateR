{% set version = '0.5.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-htmltidy
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/htmltidy_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/htmltidy/htmltidy_{{ version }}.tar.gz
  sha256: 011cd0dce79b61bc0b1441dba0e2e9e263bd254b6e927275a80e94339c9353b6

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: testthat, httr, rvest
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp
    - r-xml
    - r-htmltools
    - r-htmlwidgets
    - r-xml2

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp
    - r-xml
    - r-htmltools
    - r-htmlwidgets
    - r-xml2

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('htmltidy')"           # [not win]
    - "\"%R%\" -e \"library('htmltidy')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://gitlab.com/hrbrmstr/htmltidy
  license: MIT
  summary: HTML documents can be beautiful and pristine. They can also be wretched, evil, malformed
    demon-spawn. Now, you can tidy up that HTML and XHTML before processing it with
    your favorite angle-bracket crunching tools, going beyond the limited tidying that
    'libxml2' affords in the 'XML' and 'xml2' packages and taming even the ugliest HTML
    code generated by the likes of Google Docs and Microsoft Word. It's also possible
    to use the functions provided to format or "pretty print" HTML content as it is
    being tidied. Utilities are also included that make it possible to view formatted
    and "pretty printed" HTML/XML content from HTML/XML document objects, nodes, node
    sets and plain character HTML/XML using 'vkbeautify' (by Vadim Kiryukhin) and 'highlight.js'
    (by Ivan Sagalaev). Also (optionally) enables filtering of nodes via XPath or viewing
    an HTML/XML document in "tree" view using 'XMLDisplay' (by Lev Muchnik). See <https://github.com/vkiryukhin/vkBeautify>
    and <http://www.levmuchnik.net/Content/ProgrammingTips/WEB/XMLDisplay/DisplayXMLFileWithJavascript.html>
    for more information about 'vkbeautify' and 'XMLDisplay', respectively.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: htmltidy
# Title: Tidy Up and Test XPath Queries on HTML and XML Content
# Version: 0.5.0
# Encoding: UTF-8
# Authors@R: c( person("Bob", "Rudis", email = "bob@rud.is", role = c("aut", "cre")), person("Dave", "Raggett", email = "dsr@w3.org", role = c("ctb", "aut"), comment="Original HTML Tidy library"), person("Charles", "Reitzel", role = c("ctb", "aut"), comment="Modern HTML Tidy library"), person("Bjorn", "Hohrmann", role = c("ctb", "aut"), comment="HTML5 Support"), person("Kenton","Russell", role = c("aut", "ctb"), comment = "xml-viewer integration", email = "kent.russell@timelyportfolio.com"), person("Vadim", "Kiryukhin", role = c("ctb", "cph"), comment = "vkbeautify library"), person("Ivan", "Sagalaev", role = c("ctb", "cph"), comment = "highlight.js library"), person("Lev", "Muchnik", email = "LevMuchnik@gmail.com", role = c("ctb", "cph"), comment = "xml-viewer library") )
# Maintainer: Bob Rudis <bob@rud.is>
# Description: HTML documents can be beautiful and pristine. They can also be wretched, evil, malformed demon-spawn. Now, you can tidy up that HTML and XHTML before processing it with your favorite angle-bracket crunching tools, going beyond the limited tidying that 'libxml2' affords in the 'XML' and 'xml2' packages and taming even the ugliest HTML code generated by the likes of Google Docs and Microsoft Word. It's also possible to use the functions provided to format or "pretty print" HTML content as it is being tidied. Utilities are also included that make it possible to view formatted and "pretty printed" HTML/XML content from HTML/XML document objects, nodes, node sets and plain character HTML/XML using 'vkbeautify' (by Vadim Kiryukhin) and 'highlight.js' (by Ivan Sagalaev). Also (optionally) enables filtering of nodes via XPath or viewing an HTML/XML document in "tree" view using 'XMLDisplay' (by Lev Muchnik). See <https://github.com/vkiryukhin/vkBeautify> and <http://www.levmuchnik.net/Content/ProgrammingTips/WEB/XMLDisplay/DisplayXMLFileWithJavascript.html> for more information about 'vkbeautify' and 'XMLDisplay', respectively.
# Copyright: file inst/COPYRIGHTS
# URL: https://gitlab.com/hrbrmstr/htmltidy
# BugReports: https://gitlab.com/hrbrmstr/htmltidy/issues
# Depends: R (>= 3.2.0)
# License: MIT + file LICENSE
# LazyData: true
# NeedsCompilation: yes
# Suggests: testthat, httr, rvest
# LinkingTo: Rcpp
# Imports: Rcpp, xml2, XML, htmlwidgets, htmltools
# RoxygenNote: 6.1.1
# Packaged: 2019-10-03 17:37:57 UTC; hrbrmstr
# Author: Bob Rudis [aut, cre], Dave Raggett [ctb, aut] (Original HTML Tidy library), Charles Reitzel [ctb, aut] (Modern HTML Tidy library), Bjorn Hohrmann [ctb, aut] (HTML5 Support), Kenton Russell [aut, ctb] (xml-viewer integration), Vadim Kiryukhin [ctb, cph] (vkbeautify library), Ivan Sagalaev [ctb, cph] (highlight.js library), Lev Muchnik [ctb, cph] (xml-viewer library)
# Repository: CRAN
# Date/Publication: 2019-10-03 18:40:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
