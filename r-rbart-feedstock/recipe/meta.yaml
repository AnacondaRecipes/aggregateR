{% set version = '1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rbart
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/rbart_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/rbart/rbart_{{ version }}.tar.gz
  sha256: 65bc78528bfa62ebaf7bcbc6a15cc16919db2fb29e4e4c5783ce26ce7ca8ceaf

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, rmarkdown, MASS, nnet
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}sed               # [win]
    - {{posix}}grep              # [win]
    - {{posix}}autoconf
    - {{posix}}automake          # [not win]
    - {{posix}}automake-wrapper  # [win]
    - {{posix}}pkg-config
    - {{posix}}make
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.3

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.12.3

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('rbart')"           # [not win]
    - "\"%R%\" -e \"library('rbart')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=rbart
  license: GPL-2
  summary: ' A model of the form Y = f(x) + s(x) Z is fit where functions f and s are modeled
    with ensembles of trees and Z is standard normal.   This model is developed in the
    paper ''Heteroscedastic BART Via Multiplicative Regression Trees''  (Pratola, Chipman,
    George, and McCulloch, 2019, <arXiv:1709.07542v2>). BART refers to Bayesian Additive
    Regression Trees. See the R-package ''BART''. The predictor vector x may be high
    dimensional. A Markov Chain Monte Carlo (MCMC) algorithm provides Bayesian posterior
    uncertainty for both f and s. The MCMC uses the recent innovations in  Efficient
    Metropolis--Hastings proposal mechanisms for Bayesian regression tree models  (Pratola,
    2015, Bayesian Analysis, <doi:10.1214/16-BA999>).'

  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: rbart
# Type: Package
# Title: Bayesian Trees for Conditional Mean and Variance
# Version: 1.0
# Date: 2019-07-28
# Authors@R: c(person('Robert', 'McCulloch', role=c('aut','cre','cph'),email='robert.e.mcculloch@gmail.com'), person('Matthew', 'Pratola', role=c('aut','cph')), person('Hugh','Chipman',role=c('aut','cph')))
# Description:  A model of the form Y = f(x) + s(x) Z is fit where functions f and s are modeled with ensembles of trees and Z is standard normal.   This model is developed in the paper 'Heteroscedastic BART Via Multiplicative Regression Trees'  (Pratola, Chipman, George, and McCulloch, 2019, <arXiv:1709.07542v2>). BART refers to Bayesian Additive Regression Trees. See the R-package 'BART'. The predictor vector x may be high dimensional. A Markov Chain Monte Carlo (MCMC) algorithm provides Bayesian posterior uncertainty for both f and s. The MCMC uses the recent innovations in  Efficient Metropolis--Hastings proposal mechanisms for Bayesian regression tree models  (Pratola, 2015, Bayesian Analysis, <doi:10.1214/16-BA999>).
# License: GPL (>= 2)
# Depends: R (>= 2.10)
# Imports: Rcpp (>= 0.12.3)
# Suggests: knitr, rmarkdown, MASS, nnet
# LinkingTo: Rcpp
# SystemRequirements: C++11
# NeedsCompilation: yes
# Packaged: 2019-07-28 16:17:05 UTC; rob
# Author: Robert McCulloch [aut, cre, cph], Matthew Pratola [aut, cph], Hugh Chipman [aut, cph]
# Maintainer: Robert McCulloch <robert.e.mcculloch@gmail.com>
# Repository: CRAN
# Date/Publication: 2019-08-01 09:20:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
