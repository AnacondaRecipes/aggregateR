{% set version = '0.2.7' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-settings
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/settings_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/settings/settings_{{ version }}.tar.gz
  sha256: 651a02d59fe64fded64a9b7bc252f7ab9e3124445a6d44727f698b8b669131c5

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, rmarkdown, tinytest
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('settings')"           # [not win]
    - "\"%R%\" -e \"library('settings')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/markvanderloo/settings
  license: GPL-3
  summary: Provides option settings management that goes beyond R's default 'options' function.
    With this package, users can define their own option settings manager holding option
    names, default values and (if so desired) ranges or sets of allowed option values
    that will be automatically checked. Settings can then be retrieved, altered and
    reset to defaults with ease. For R programmers and package developers it offers
    cloning and merging functionality which allows for conveniently defining global
    and local options, possibly in a multilevel options hierarchy. See the package vignette
    for some examples concerning functions, S4 classes, and reference classes. There
    are convenience functions to reset par() and options() to their 'factory defaults'.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: settings
# Type: Package
# Title: Software Option Settings Manager for R
# Version: 0.2.7
# Author: Mark van der Loo
# Maintainer: Mark van der Loo <mark.vanderloo@gmail.com>
# Description: Provides option settings management that goes beyond R's default 'options' function. With this package, users can define their own option settings manager holding option names, default values and (if so desired) ranges or sets of allowed option values that will be automatically checked. Settings can then be retrieved, altered and reset to defaults with ease. For R programmers and package developers it offers cloning and merging functionality which allows for conveniently defining global and local options, possibly in a multilevel options hierarchy. See the package vignette for some examples concerning functions, S4 classes, and reference classes. There are convenience functions to reset par() and options() to their 'factory defaults'.
# URL: https://github.com/markvanderloo/settings
# BugReports: https://github.com/markvanderloo/settings/issues
# License: GPL-3
# VignetteBuilder: knitr
# Imports: grDevices, graphics
# Suggests: knitr, rmarkdown, tinytest
# RoxygenNote: 7.1.1
# NeedsCompilation: no
# Packaged: 2021-05-07 14:50:47 UTC; mark
# Repository: CRAN
# Date/Publication: 2021-05-07 15:50:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
