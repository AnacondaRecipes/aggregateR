{% set version = '3.0.4' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-ngram
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/ngram_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/ngram/ngram_{{ version }}.tar.gz
  sha256: 5e71a0b6c5f3a38664c91d244fbcea9bcfe063bb0e88eed68c92ede31b319ee0

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('ngram')"           # [not win]
    - "\"%R%\" -e \"library('ngram')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/wrathematics/ngram
  license: BSD_2_clause
  summary: An n-gram is a sequence of n "words" taken, in order, from a body of text.  This is
    a collection of utilities for creating, displaying, summarizing, and "babbling"
    n-grams.  The 'tokenization' and "babbling" are handled by very efficient C code,
    which can even be built as its own standalone library. The babbler is a simple Markov
    chain.  The package also offers a vignette with complete example 'workflows' and
    information about the utilities offered in the package.
  license_family: BSD
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/BSD_2_clause'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: ngram
# Type: Package
# Title: Fast n-Gram 'Tokenization'
# Version: 3.0.4
# Description: An n-gram is a sequence of n "words" taken, in order, from a body of text.  This is a collection of utilities for creating, displaying, summarizing, and "babbling" n-grams.  The 'tokenization' and "babbling" are handled by very efficient C code, which can even be built as its own standalone library. The babbler is a simple Markov chain.  The package also offers a vignette with complete example 'workflows' and information about the utilities offered in the package.
# License: BSD 2-clause License + file LICENSE
# Depends: R (>= 3.0.0)
# Imports: methods
# LazyData: yes
# LazyLoad: yes
# NeedsCompilation: yes
# ByteCompile: yes
# Authors@R: c(person("Drew", "Schmidt", role=c("aut", "cre"),  email="wrathematics@gmail.com"), person("Christian", "Heckendorf", role="aut"))
# Maintainer: Drew Schmidt <wrathematics@gmail.com>
# URL: https://github.com/wrathematics/ngram
# BugReports: https://github.com/wrathematics/ngram/issues
# Collate: 'ngram.r' 'babble.r' 'checks.r' 'concatenate.r' 'getseed.r' 'getters.r' 'multiread.r' 'ngram-package.R' 'ngram_asweka.r' 'phrasetable.r' 'preprocess.r' 'print.r' 'rcorpus.r' 'splitter.r' 'string.summary.r' 'wordcount.r'
# RoxygenNote: 6.0.1
# Packaged: 2017-11-21 14:57:16 UTC; mschmid3
# Author: Drew Schmidt [aut, cre], Christian Heckendorf [aut]
# Repository: CRAN
# Date/Publication: 2017-11-21 15:22:56 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
