{% set version = '0.6.9' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-lambertw
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/LambertW_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/LambertW/LambertW_{{ version }}.tar.gz
  sha256: 7971c662ee36017f2fed4f6419955f59e7a86a0378bc115ee79bc4c289d2c008

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: boot, Rsolnp, nortest, numDeriv, testthat, data.table, moments, knitr, markdown, vars,
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-mass
    - r-rcolorbrewer
    - r-rcpp >=1.0.4
    - r-ggplot2
    - r-lamw >=1.3.0
    - r-reshape2

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-mass
    - r-rcolorbrewer
    - r-rcpp >=1.0.4
    - r-ggplot2
    - r-lamw >=1.3.0
    - r-reshape2

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('LambertW')"           # [not win]
    - "\"%R%\" -e \"library('LambertW')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/gmgeorg/LambertW https://arxiv.org/abs/0912.4554 https://arxiv.org/abs/1010.2265
    https://arxiv.org/abs/1602.02200
  license: GPL-2
  summary: 'Lambert W x F distributions are a generalized framework to analyze skewed, heavy-tailed
    data. It is based on an input/output system, where the output random variable (RV)
    Y is a non-linearly transformed version of an input RV X ~ F with similar properties
    as X, but slightly skewed (heavy-tailed). The transformed RV Y has a Lambert W x
    F distribution. This package contains functions to model and analyze skewed, heavy-tailed
    data the Lambert Way: simulate random samples, estimate parameters, compute quantiles,
    and plot/ print results nicely. The most useful function is ''Gaussianize'', which
    works similarly to ''scale'', but actually makes the data Gaussian. A do-it-yourself
    toolkit allows users to define their own Lambert W x ''MyFavoriteDistribution''
    and use it in their analysis right away.'
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

# The original CRAN metadata for this package was:

# Package: LambertW
# Type: Package
# Title: Probabilistic Models to Analyze and Gaussianize Heavy-Tailed, Skewed Data
# Version: 0.6.9
# Authors@R: person(given = "Georg M.", family = "Goerg", role = c("aut", "cre"), email = "im@gmge.org")
# URL: https://github.com/gmgeorg/LambertW https://arxiv.org/abs/0912.4554 https://arxiv.org/abs/1010.2265 https://arxiv.org/abs/1602.02200
# BugReports: https://github.com/gmgeorg/LambertW/issues
# Description: Lambert W x F distributions are a generalized framework to analyze skewed, heavy-tailed data. It is based on an input/output system, where the output random variable (RV) Y is a non-linearly transformed version of an input RV X ~ F with similar properties as X, but slightly skewed (heavy-tailed). The transformed RV Y has a Lambert W x F distribution. This package contains functions to model and analyze skewed, heavy-tailed data the Lambert Way: simulate random samples, estimate parameters, compute quantiles, and plot/ print results nicely. The most useful function is 'Gaussianize', which works similarly to 'scale', but actually makes the data Gaussian. A do-it-yourself toolkit allows users to define their own Lambert W x 'MyFavoriteDistribution' and use it in their analysis right away.
# Depends: MASS, ggplot2,
# Imports: lamW (>= 1.3.0), stats, graphics, grDevices, RColorBrewer, reshape2, Rcpp (>= 1.0.4), methods
# Suggests: boot, Rsolnp, nortest, numDeriv, testthat, data.table, moments, knitr, markdown, vars,
# License: GPL (>= 2)
# LazyLoad: yes
# NeedsCompilation: yes
# Repository: CRAN
# LinkingTo: Rcpp, lamW
# RoxygenNote: 7.2.1
# Encoding: UTF-8
# VignetteBuilder: knitr
# Packaged: 2023-10-29 22:04:28 UTC; georg
# Author: Georg M. Goerg [aut, cre]
# Maintainer: Georg M. Goerg <im@gmge.org>
# Date/Publication: 2023-10-30 08:20:19 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
