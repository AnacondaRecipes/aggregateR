{% set version = '1.0.1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-commandr
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/commandr_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/commandr/commandr_{{ version }}.tar.gz
  sha256: d3957b49dccbb591d580c649de3dd87d0cbbdf3c946989aa34dd06c68b82ccb4

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('commandr')"           # [not win]
    - "\"%R%\" -e \"library('commandr')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=commandr
  license: Artistic-2.0
  summary: An S4 representation of the Command design pattern. The Operation class is a simple
    implementation using closures and supports forward and reverse (undo) evaluation.
    The more complicated Protocol framework represents each type of command (or analytical
    protocol) by a formal S4 class. Commands may be grouped and consecutively executed
    using the Pipeline class. Example use cases include logging, do/undo, analysis pipelines,
    GUI actions, parallel processing, etc.
  license_family: OTHER
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/Artistic-2.0'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: commandr
# Title: Command pattern in R
# Version: 1.0.1
# Author: Michael Lawrence
# Depends: methods
# Imports: utils
# Description: An S4 representation of the Command design pattern. The Operation class is a simple implementation using closures and supports forward and reverse (undo) evaluation. The more complicated Protocol framework represents each type of command (or analytical protocol) by a formal S4 class. Commands may be grouped and consecutively executed using the Pipeline class. Example use cases include logging, do/undo, analysis pipelines, GUI actions, parallel processing, etc.
# Maintainer: Tengfei Yin <yintengfei@gmail.com>
# License: Artistic-2.0
# Packaged: 2014-08-25 18:17:49 UTC; tengfei
# NeedsCompilation: no
# Repository: CRAN
# Date/Publication: 2014-08-25 20:22:16

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
