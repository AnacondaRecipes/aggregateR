{% set version = '0.10.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-progressr
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/progressr_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/progressr/progressr_{{ version }}.tar.gz
  sha256: 4c95dc11c50c792440fa17f4538d59f1f3012bf6ef462a5a141609f87319badc

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: graphics, tcltk, beepr, crayon, pbmcapply, progress, purrr, foreach, plyr, doFuture, future, future.apply, furrr, rstudioapi, shiny, commonmark, base64enc, tools
requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-digest

  run:
    - r-base
    - r-digest

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('progressr')"           # [not win]
    - "\"%R%\" -e \"library('progressr')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://progressr.futureverse.org, https://github.com/HenrikBengtsson/progressr
  license: GPL-3
  summary: A minimal, unifying API for scripts and packages to report progress updates from anywhere
    including when using parallel processing.  The package is designed such that the
    developer can to focus on what progress should be reported on without having to
    worry about how to present it.  The end user has full control of how, where, and
    when to render these progress updates, e.g. in the terminal using utils::txtProgressBar()
    or progress::progress_bar(), in a graphical user interface using utils::winProgressBar(),
    tcltk::tkProgressBar() or shiny::withProgress(), via the speakers using beep::beepr(),
    or on a file system via the size of a file. Anyone can add additional, customized,
    progression handlers. The 'progressr' package uses R's condition framework for signaling
    progress updated. Because of this, progress can be reported from almost anywhere
    in R, e.g. from classical for and while loops, from map-reduce API:s like the lapply()
    family of functions, 'purrr', 'plyr', and 'foreach'. It will also work with parallel
    processing via the 'future' framework, e.g. future.apply::future_lapply(), furrr::future_map(),
    and 'foreach' with 'doFuture'. The package is compatible with Shiny applications.
  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

# The original CRAN metadata for this package was:

# Package: progressr
# Version: 0.10.0
# Title: An Inclusive, Unifying API for Progress Updates
# Description: A minimal, unifying API for scripts and packages to report progress updates from anywhere including when using parallel processing.  The package is designed such that the developer can to focus on what progress should be reported on without having to worry about how to present it.  The end user has full control of how, where, and when to render these progress updates, e.g. in the terminal using utils::txtProgressBar() or progress::progress_bar(), in a graphical user interface using utils::winProgressBar(), tcltk::tkProgressBar() or shiny::withProgress(), via the speakers using beep::beepr(), or on a file system via the size of a file. Anyone can add additional, customized, progression handlers. The 'progressr' package uses R's condition framework for signaling progress updated. Because of this, progress can be reported from almost anywhere in R, e.g. from classical for and while loops, from map-reduce API:s like the lapply() family of functions, 'purrr', 'plyr', and 'foreach'. It will also work with parallel processing via the 'future' framework, e.g. future.apply::future_lapply(), furrr::future_map(), and 'foreach' with 'doFuture'. The package is compatible with Shiny applications.
# Authors@R: c( person("Henrik", "Bengtsson", role=c("aut", "cre", "cph"), email = "henrikb@braju.com"))
# License: GPL (>= 3)
# Depends: R (>= 3.5.0)
# Imports: digest, utils
# Suggests: graphics, tcltk, beepr, crayon, pbmcapply, progress, purrr, foreach, plyr, doFuture, future, future.apply, furrr, rstudioapi, shiny, commonmark, base64enc, tools
# VignetteBuilder: progressr
# URL: https://progressr.futureverse.org, https://github.com/HenrikBengtsson/progressr
# BugReports: https://github.com/HenrikBengtsson/progressr/issues
# RoxygenNote: 7.1.2
# NeedsCompilation: no
# Packaged: 2021-12-19 02:09:26 UTC; hb
# Author: Henrik Bengtsson [aut, cre, cph]
# Maintainer: Henrik Bengtsson <henrikb@braju.com>
# Repository: CRAN
# Date/Publication: 2021-12-19 03:50:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
