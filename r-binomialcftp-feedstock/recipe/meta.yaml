{% set version = '1.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-binomialcftp
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/binomialcftp_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/binomialcftp/binomialcftp_{{ version }}.tar.gz
  sha256: 1907d589a76d09f72f6b02ad4cbc2ef8e4e8d93a9d0414fae8b687d969f58701

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('binomialcftp')"           # [not win]
    - "\"%R%\" -e \"library('binomialcftp')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=binomialcftp
  license: GPL-2
  summary: Binomial random numbers are generated via the perfect sampling algorithm. At each
    iteration dual markov chains are generated and coalescence is checked. In case coalescence
    occurs, the resulting number is outputted. In case not, then the algorithm is restarted
    from T(t)=2*T(t) until coalescence occurs.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: binomialcftp
# Type: Package
# Title: Generates binomial random numbers via the coupling from the past algorithm
# Version: 1.0
# Date: 2012-09-14
# Author: Francisco Juretig
# Maintainer: Francisco Jureitg <fjuretig@yahoo.com>
# Description: Binomial random numbers are generated via the perfect sampling algorithm. At each iteration dual markov chains are generated and coalescence is checked. In case coalescence occurs, the resulting number is outputted. In case not, then the algorithm is restarted from T(t)=2*T(t) until coalescence occurs.
# License: GPL-2
# LazyLoad: yes
# Packaged: 2012-09-19 14:18:46 UTC; Fran
# Repository: CRAN
# Date/Publication: 2012-09-20 06:42:30

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
