{% set version = '1.2' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-pp3
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/PP3_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/PP3/PP3_{{ version }}.tar.gz
  sha256: 6ee789e7c45f8288bef69ca4fc01ed029e8271d489dfbdbe83bee7c0135566bc

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('fortran') }}        # [not win]
    - {{ compiler('m2w64_fortran') }}  # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('PP3')"           # [not win]
    - "\"%R%\" -e \"library('PP3')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: http://www.stats.bris.ac.uk/~guy
  license: GPL-2
  summary: Exploratory projection pursuit is a method to discovers structure in multivariate
    data. At heart this package uses a projection index to evaluate how interesting
    a specific three-dimensional projection of multivariate data (with more than three
    dimensions) is. Typically, the main structure finding algorithm starts at a random
    projection and then iteratively changes the projection direction to move to a more
    interesting one. In other words, the projection index is maximised over the projection
    direction to find the most interesting projection. This maximum is, though, a local
    maximum. So, this code has the ability to restart the algorithm from many different
    starting positions automatically. Routines exist to plot a density estimate of projection
    indices over the runs, this enables the user to obtain an idea of the distribution
    of the projection indices, and, hence,  which ones might be interesting. Individual
    projection solutions, including those identified as interesting, can be extracted
    and plotted individually. The package can make use of the mclapply() function to
    execute multiple runs in parallel to speed up index discovery. Projection pursuit
    is similar to independent component analysis. This package uses a projection index
    that maximises an entropy measure to look for projections that exhibit non-normality,
    and operates on sphered data. Hence, information from this package is different
    from that obtained from principal components analysis, but the rationale behind
    both methods is similar. Nason, G. P. (1995) <doi:10.2307/2986135>.
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: PP3
# Type: Package
# Title: Three-Dimensional Exploratory Projection Pursuit
# Version: 1.2
# Date: 2018-03-06
# Authors@R: c(person("Guy", "Nason", role=c("aut", "cre"), email="G.P.Nason@bristol.ac.uk"), person("Robin", "Sibson", role=c("ctb", "ths")))
# Depends: R (>= 3.0)
# Imports: stats
# Description: Exploratory projection pursuit is a method to discovers structure in multivariate data. At heart this package uses a projection index to evaluate how interesting a specific three-dimensional projection of multivariate data (with more than three dimensions) is. Typically, the main structure finding algorithm starts at a random projection and then iteratively changes the projection direction to move to a more interesting one. In other words, the projection index is maximised over the projection direction to find the most interesting projection. This maximum is, though, a local maximum. So, this code has the ability to restart the algorithm from many different starting positions automatically. Routines exist to plot a density estimate of projection indices over the runs, this enables the user to obtain an idea of the distribution of the projection indices, and, hence,  which ones might be interesting. Individual projection solutions, including those identified as interesting, can be extracted and plotted individually. The package can make use of the mclapply() function to execute multiple runs in parallel to speed up index discovery. Projection pursuit is similar to independent component analysis. This package uses a projection index that maximises an entropy measure to look for projections that exhibit non-normality, and operates on sphered data. Hence, information from this package is different from that obtained from principal components analysis, but the rationale behind both methods is similar. Nason, G. P. (1995) <doi:10.2307/2986135>.
# License: GPL (>= 2)
# URL: http://www.stats.bris.ac.uk/~guy
# NeedsCompilation: yes
# Packaged: 2018-03-09 10:01:21 UTC; magpn
# Author: Guy Nason [aut, cre], Robin Sibson [ctb, ths]
# Maintainer: Guy Nason <G.P.Nason@bristol.ac.uk>
# Repository: CRAN
# Date/Publication: 2018-03-09 12:43:48 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
