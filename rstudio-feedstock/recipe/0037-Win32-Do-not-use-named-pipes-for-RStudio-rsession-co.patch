From dbbcc4054763980df16bd2fbca2a8e1af2ebc7ff Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Sat, 5 Nov 2016 00:59:07 +0000
Subject: [PATCH 37/44] Win32: Do not use named pipes for RStudio/rsession
 comms

Mostly because I can snoop on TCP/IP more easily than on named pipes

Note: I have neutered this for now (but still apply it) as it is broken
as of RStudio 1.1.383 (or maybe even 1.0.153, we did not apply it there).
I suspect that this patch only worked on mingw-w64 and that I used it to
debug a problem there and then stopped applying it. We end up with the
following include chain:

cpp\session\include\session/http/SessionRequest.hpp (no change)
 cpp\core\include\core/http/LocalStreamBlockingClient.hpp (no change)
  cpp\core\include\core/http/LocalStreamAsyncClient.hpp (no change)
   cpp\core\include\core/http/LocalStreamSocketUtils.hpp (no change?!)
    cpp\core\include\core/system/FileMode.hpp

.. and that fails because FileMode.hpp has:

#ifdef _WIN32
#error FileMode.hpp is is not supported on Windows
#endif

We should only apply this change when debugging tricky problems
as it could cause issues, but I am keeping it around for future
reference in-case I need to snoop the comms (using mingw-w64?).

Note: There never was any support for allowing builds to define
_WIN32_USING_NAMED_PIPES; really it should be implemented as a
cache var (that defaults to TRUE) in CMakeLists.txt so I can pass
on the cmake commandline: -D_WIN32_USING_NAMED_PIPES=FALSE when
I need to debug the communications. Before I do that I would need
to make it compile again, obviously.

Also, enabling this requires boost::asio::local which I suppose
msys2/mingw-w64-boost *may* have implemented over a TCP socket?

---
 src/cpp/desktop/DesktopOptions.cpp                      | 2 +-
 src/cpp/session/include/session/http/SessionRequest.hpp | 4 ++--
 2 files changed, 3 insertions(+), 3 deletions(-)

diff --git a/src/cpp/desktop/DesktopOptions.cpp b/src/cpp/desktop/DesktopOptions.cpp
index 3e1c7b5431..c8ba20295c 100644
--- a/src/cpp/desktop/DesktopOptions.cpp
+++ b/src/cpp/desktop/DesktopOptions.cpp
@@ -90,7 +90,7 @@ QString Options::portNumber() const
 
       // recalculate the local peer and set RS_LOCAL_PEER so that
       // rsession and it's children can use it
-#ifdef _WIN32
+#ifdef _WIN32 // _WIN32_USING_NAMED_PIPES
       QString localPeer = QString::fromUtf8("\\\\.\\pipe\\") +
                           portNumber_ + QString::fromUtf8("-rsession");
 #else
diff --git a/src/cpp/session/include/session/http/SessionRequest.hpp b/src/cpp/session/include/session/http/SessionRequest.hpp
index 7e6313f322..3b866f7cda 100644
--- a/src/cpp/session/include/session/http/SessionRequest.hpp
+++ b/src/cpp/session/include/session/http/SessionRequest.hpp
@@ -21,7 +21,7 @@
 
 #include <session/http/SessionRequest.hpp>
 
-#if !defined(_WIN32)
+#if !defined(_WIN32) // _WIN32_USING_NAMED_PIPES)
 #include <core/http/TcpIpBlockingClient.hpp>
 #include <core/http/LocalStreamBlockingClient.hpp>
 #include <core/http/ConnectionRetryProfile.hpp>
@@ -53,7 +53,7 @@ inline core::Error sendSessionRequest(const std::string& uri,
    request.setHeader("Connection", "close");
    request.setBody(body);
 
-#ifdef _WIN32
+#ifdef _WIN32 // _WIN32_USING_NAMED_PIPES
    // get local peer
    std::string pipeName = core::system::getenv("RS_LOCAL_PEER");
    request.setHeader("X-Shared-Secret",
-- 
2.14.2

