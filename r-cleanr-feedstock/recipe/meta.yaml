{% set version = '1.2.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-cleanr
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/cleanr_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/cleanr/cleanr_{{ version }}.tar.gz
  sha256: e525803b94b6d3eb1271aff778ccdbcc5b64c507f0e0118f794166b225e1a6f9

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: RUnit, knitr, rmarkdown, testthat, devtools, usethis
requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-checkmate
    - r-pkgload
    - r-rprojroot

  run:
    - r-base
    - r-checkmate
    - r-pkgload
    - r-rprojroot

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('cleanr')"           # [not win]
    - "\"%R%\" -e \"library('cleanr')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://gitlab.com/fvafrCU/cleanr
  license: BSD_2_clause
  summary: 'Check your R code for some of the most common layout flaws.  Many tried to teach
    us how to write code less dreadful, be it implicitly as B. W. Kernighan and D. M.
    Ritchie (1988) <ISBN:0-13-110362-8> in ''The C Programming Language'' did, be it
    explicitly as R.C. Martin (2008) <ISBN:0-13-235088-2> in ''Clean Code: A Handbook
    of Agile Software Craftsmanship'' did.  So we should check our code for files too
    long or wide, functions with too many lines, too wide lines, too many arguments
    or too many levels of nesting. Note: This is not a static code analyzer like pylint
    or the like. Checkout <https://cran.r-project.org/package=lintr> instead.'

  license_family: BSD
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/BSD_2_clause'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Type: Package
# Package: cleanr
# Title: Helps You to Code Cleaner
# Version: 1.2.0
# Authors@R:  person(given = "Andreas Dominik", family = "Cullmann", role = c("aut", "cre"), email = "fvafrcu@mailbox.org")
# Description: Check your R code for some of the most common layout flaws.  Many tried to teach us how to write code less dreadful, be it implicitly as B. W. Kernighan and D. M. Ritchie (1988) <ISBN:0-13-110362-8> in 'The C Programming Language' did, be it explicitly as R.C. Martin (2008) <ISBN:0-13-235088-2> in 'Clean Code: A Handbook of Agile Software Craftsmanship' did.  So we should check our code for files too long or wide, functions with too many lines, too wide lines, too many arguments or too many levels of nesting. Note: This is not a static code analyzer like pylint or the like. Checkout <https://cran.r-project.org/package=lintr> instead.
# License: BSD_2_clause + file LICENSE
# URL: https://gitlab.com/fvafrCU/cleanr
# Depends: R (>= 3.3.0)
# Imports: checkmate, rprojroot, pkgload
# Suggests: RUnit, knitr, rmarkdown, testthat, devtools, usethis
# VignetteBuilder: knitr
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 6.1.1
# Collate: 'utils.R' 'internals.R' 'checks.R' 'cleanr-package.R' 'options.R' 'throw.R' 'wrappers.R' 'zzz.R'
# NeedsCompilation: no
# Packaged: 2019-03-21 21:10:49 UTC; qwer
# Author: Andreas Dominik Cullmann [aut, cre]
# Maintainer: Andreas Dominik Cullmann <fvafrcu@mailbox.org>
# Repository: CRAN
# Date/Publication: 2019-03-22 09:53:41 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
