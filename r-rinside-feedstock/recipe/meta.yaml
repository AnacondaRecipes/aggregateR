{% set version = '0.2.18' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rinside
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/RInside_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/RInside/RInside_{{ version }}.tar.gz
  sha256: 805014f0f0a364633e0e3c59100665a089bc455dec80b24f04aaec96466cb736

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('RInside')"           # [not win]
    - "\"%R%\" -e \"library('RInside')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/eddelbuettel/rinside/, https://dirk.eddelbuettel.com/code/rinside.html
  license: GPL-2
  summary: 'C++ classes to embed R in C++ (and C) applications A C++ class providing the R interpreter
    is offered by this package making it easier to have "R inside" your C++ application.
    As R itself is embedded into your application, a shared library build of R is required.
    This works on Linux, OS X and even on Windows provided you use the same tools used
    to build R itself. Numerous examples are provided in the nine subdirectories of
    the examples/ directory of the installed package: standard, ''mpi'' (for parallel
    computing), ''qt'' (showing how to embed ''RInside'' inside a Qt GUI application),
    ''wt'' (showing how to build a "web-application" using the Wt toolkit), ''armadillo''
    (for ''RInside'' use with ''RcppArmadillo''), ''eigen'' (for ''RInside'' use with
    ''RcppEigen''), and ''c_interface'' for a basic C interface and ''Ruby'' illustration.  The
    examples use ''GNUmakefile(s)'' with GNU extensions, so a GNU make is required (and
    will use the ''GNUmakefile'' automatically). ''Doxygen''-generated documentation
    of the C++ classes is available at the ''RInside'' website as well.'
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: RInside
# Title: C++ Classes to Embed R in C++ (and C) Applications
# Version: 0.2.18
# Date: 2023-02-01
# Author: Dirk Eddelbuettel, Romain Francois, and Lance Bachmeier
# Maintainer: Dirk Eddelbuettel <edd@debian.org>
# Description: C++ classes to embed R in C++ (and C) applications A C++ class providing the R interpreter is offered by this package making it easier to have "R inside" your C++ application. As R itself is embedded into your application, a shared library build of R is required. This works on Linux, OS X and even on Windows provided you use the same tools used to build R itself. Numerous examples are provided in the nine subdirectories of the examples/ directory of the installed package: standard, 'mpi' (for parallel computing), 'qt' (showing how to embed 'RInside' inside a Qt GUI application), 'wt' (showing how to build a "web-application" using the Wt toolkit), 'armadillo' (for 'RInside' use with 'RcppArmadillo'), 'eigen' (for 'RInside' use with 'RcppEigen'), and 'c_interface' for a basic C interface and 'Ruby' illustration.  The examples use 'GNUmakefile(s)' with GNU extensions, so a GNU make is required (and will use the 'GNUmakefile' automatically). 'Doxygen'-generated documentation of the C++ classes is available at the 'RInside' website as well.
# Imports: Rcpp
# LinkingTo: Rcpp
# URL: https://github.com/eddelbuettel/rinside/, https://dirk.eddelbuettel.com/code/rinside.html
# License: GPL (>= 2)
# BugReports: https://github.com/eddelbuettel/rinside/issues
# MailingList: Please send questions and comments regarding RInside to rcpp-devel@lists.r-forge.r-project.org
# NeedsCompilation: yes
# Packaged: 2023-02-01 13:21:06 UTC; edd
# Repository: CRAN
# Date/Publication: 2023-02-01 16:30:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
