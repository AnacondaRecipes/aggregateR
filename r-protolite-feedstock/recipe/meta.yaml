{% set version = '2.3.0' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-protolite
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/protolite_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/protolite/protolite_{{ version }}.tar.gz
  sha256: 53ef24d51a8348f97bec39d254df3b97bd8b3d9bbffb81d6b06aad849cf78ce9

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: spelling, curl, testthat, sf
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}sed               # [win]
    - {{ posix }}grep              # [win]
    - {{ posix }}autoconf
    - {{ posix }}automake          # [not win]
    - {{ posix }}automake-wrapper  # [win]
    - {{ posix }}pkg-config
    - {{ posix }}make
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.12
    - r-jsonlite

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.12.12
    - r-jsonlite

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('protolite')"           # [not win]
    - "\"%R%\" -e \"library('protolite')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/jeroen/protolite https://jeroen.r-universe.dev/protolite
  license: MIT
  summary: Pure C++ implementations for reading and writing several common data formats based
    on Google protocol-buffers. Currently supports 'rexp.proto' for serialized R objects,
    'geobuf.proto' for binary geojson, and 'mvt.proto' for vector tiles. This package
    uses the auto-generated C++ code by protobuf-compiler, hence the entire serialization
    is optimized at compile time. The 'RProtoBuf' package on the other hand uses the
    protobuf runtime library to provide a general- purpose toolkit for reading and writing
    arbitrary protocol-buffer data in R.
  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: protolite
# Type: Package
# Title: Highly Optimized Protocol Buffer Serializers
# Author: Jeroen Ooms
# Maintainer: Jeroen Ooms <jeroen@berkeley.edu>
# Description: Pure C++ implementations for reading and writing several common data formats based on Google protocol-buffers. Currently supports 'rexp.proto' for serialized R objects, 'geobuf.proto' for binary geojson, and 'mvt.proto' for vector tiles. This package uses the auto-generated C++ code by protobuf-compiler, hence the entire serialization is optimized at compile time. The 'RProtoBuf' package on the other hand uses the protobuf runtime library to provide a general- purpose toolkit for reading and writing arbitrary protocol-buffer data in R.
# Version: 2.3.0
# License: MIT + file LICENSE
# URL: https://github.com/jeroen/protolite https://jeroen.r-universe.dev/protolite
# BugReports: https://github.com/jeroen/protolite/issues
# SystemRequirements: libprotobuf and protobuf-compiler
# LinkingTo: Rcpp
# Imports: Rcpp (>= 0.12.12), jsonlite
# Suggests: spelling, curl, testthat, sf
# Encoding: UTF-8
# Language: en-US
# RoxygenNote: 7.2.1
# NeedsCompilation: yes
# Packaged: 2023-09-25 17:17:23 UTC; jeroen
# Repository: CRAN
# Date/Publication: 2023-09-25 20:10:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
