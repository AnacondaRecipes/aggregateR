{% set version = '1.8.2.3' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-rootsolve
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/rootSolve_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/rootSolve/rootSolve_{{ version }}.tar.gz
  sha256: b5b3d1641642a3fd1279dbd1245f968d2331ac9588d77f872b113f7dc4594ba0

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('fortran') }}        # [not win]
    - {{ compiler('m2w64_fortran') }}  # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base

  run:
    - r-base
    - {{native}}gcc-libs         # [win]

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('rootSolve')"           # [not win]
    - "\"%R%\" -e \"library('rootSolve')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=rootSolve
  license: GPL-2
  summary: 'Routines to find the root of nonlinear functions, and to perform steady-state and
    equilibrium analysis of ordinary differential equations (ODE). Includes routines
    that: (1) generate gradient and jacobian matrices (full and banded), (2) find roots
    of non-linear equations by the ''Newton-Raphson'' method, (3) estimate steady-state
    conditions of a system of (differential) equations in full, banded or sparse form,
    using the ''Newton-Raphson'' method, or by dynamically running, (4) solve the steady-state
    conditions for uni-and multicomponent 1-D, 2-D, and 3-D partial differential equations,
    that have been converted to ordinary differential equations by numerical differencing
    (using the method-of-lines approach). Includes fortran code.'
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: rootSolve
# Version: 1.8.2.3
# Title: Nonlinear Root Finding, Equilibrium and Steady-State Analysis of Ordinary Differential Equations
# Authors@R: c(person("Karline","Soetaert", role = c("aut", "cre"), email = "karline.soetaert@nioz.nl"), person("Alan C.","Hindmarsh", role = "ctb", comment = "files lsodes.f, sparse.f"), person("S.C.","Eisenstat", role = "ctb", comment = "file sparse.f"), person("Cleve","Moler", role = "ctb", comment = "file dlinpk.f"), person("Jack","Dongarra", role = "ctb", comment = "file dlinpk.f"), person("Youcef", "Saad", role = "ctb", comment = "file dsparsk.f"))
# Maintainer: Karline Soetaert <karline.soetaert@nioz.nl>
# Author: Karline Soetaert [aut, cre], Alan C. Hindmarsh [ctb] (files lsodes.f, sparse.f), S.C. Eisenstat [ctb] (file sparse.f), Cleve Moler [ctb] (file dlinpk.f), Jack Dongarra [ctb] (file dlinpk.f), Youcef Saad [ctb] (file dsparsk.f)
# Depends: R (>= 2.01)
# Imports: stats, graphics, grDevices
# Description: Routines to find the root of nonlinear functions, and to perform steady-state and equilibrium analysis of ordinary differential equations (ODE). Includes routines that: (1) generate gradient and jacobian matrices (full and banded), (2) find roots of non-linear equations by the 'Newton-Raphson' method, (3) estimate steady-state conditions of a system of (differential) equations in full, banded or sparse form, using the 'Newton-Raphson' method, or by dynamically running, (4) solve the steady-state conditions for uni-and multicomponent 1-D, 2-D, and 3-D partial differential equations, that have been converted to ordinary differential equations by numerical differencing (using the method-of-lines approach). Includes fortran code.
# License: GPL (>= 2)
# NeedsCompilation: yes
# Packaged: 2021-09-23 05:51:17 UTC; karlines
# Repository: CRAN
# Date/Publication: 2021-09-29 12:30:02 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
