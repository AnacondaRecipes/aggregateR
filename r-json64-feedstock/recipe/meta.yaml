{% set version = '0.1.3' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-json64
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/json64_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/json64/json64_{{ version }}.tar.gz
  sha256: f2306ee877f8504d1667b116ae9978c0cb4b2740c14b25c2b5a3594edcc308a7

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip
  noarch: generic

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-jsonlite

  run:
    - r-base
    - r-jsonlite

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('json64')"           # [not win]
    - "\"%R%\" -e \"library('json64')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=json64
  license: MIT
  summary: 'Encode/Decode ''base64'', with support for JSON format, using two functions: j_encode()
    and j_decode().    ''Base64'' is a group of similar binary-to-text encoding schemes
    that represent binary data in an ASCII string format by translating it into a radix-64
    representation, used when there is a need to encode binary data that needs to be
    stored and transferred over media that are designed to deal with textual data, ensuring
    that the data will remain intact and without modification during transport. <https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding>    On
    the other side, JSON (JavaScript Object Notation) is a lightweight data-interchange
    format. Easy to read, write, parse and generate. It is based on a subset of the
    JavaScript Programming Language. JSON is a text format that is completely language
    independent but uses conventions that are familiar to programmers of the C-family
    of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others.
    JSON structure is built around name:value pairs and ordered list of values. <https://www.json.org>    The
    first function, j_encode(), let you transform a data.frame or list to a ''base64''
    encoded JSON (or JSON string).    The j_decode() function takes a ''base64'' string
    (could be an encoded JSON) and transform it to a data.frame (or list, depending
    of the JSON structure).'

  license_family: MIT
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/MIT'
    - LICENSE

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: json64
# Type: Package
# Title: A 'Base64' Encode/Decode Package with Support for JSON Output/Input and UTF-8
# Version: 0.1.3
# Author: Mauricio Santelices
# Maintainer: Mauricio Santelices <m.santelicesa@gmail.com>
# Description: Encode/Decode 'base64', with support for JSON format, using two functions: j_encode() and j_decode().    'Base64' is a group of similar binary-to-text encoding schemes that represent binary data in an ASCII string format by translating it into a radix-64 representation, used when there is a need to encode binary data that needs to be stored and transferred over media that are designed to deal with textual data, ensuring that the data will remain intact and without modification during transport. <https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding>    On the other side, JSON (JavaScript Object Notation) is a lightweight data-interchange format. Easy to read, write, parse and generate. It is based on a subset of the JavaScript Programming Language. JSON is a text format that is completely language independent but uses conventions that are familiar to programmers of the C-family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. JSON structure is built around name:value pairs and ordered list of values. <https://www.json.org>    The first function, j_encode(), let you transform a data.frame or list to a 'base64' encoded JSON (or JSON string).    The j_decode() function takes a 'base64' string (could be an encoded JSON) and transform it to a data.frame (or list, depending of the JSON structure).
# License: MIT + file LICENSE
# Imports: jsonlite
# Encoding: UTF-8
# LazyData: true
# RoxygenNote: 6.1.1
# NeedsCompilation: no
# Packaged: 2019-06-01 16:36:04 UTC; Mauricio
# Repository: CRAN
# Date/Publication: 2019-06-03 14:20:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
