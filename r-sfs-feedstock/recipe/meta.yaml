{% set version = '0.1.4' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-sfs
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/SFS_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/SFS/SFS_{{ version }}.tar.gz
  sha256: 67c7b1ac32532f355423f75ad0339d96120ef523c79db4fd77de83212f312fde

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: seriation
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('cxx') }}            # [not win]
    - {{ compiler('m2w64_cxx') }}      # [win]
    - {{posix}}filesystem        # [win]
    - {{posix}}make
    - {{posix}}sed               # [win]
    - {{posix}}coreutils         # [win]
    - {{posix}}zip               # [win]

  host:
    - r-base
    - r-rcpp >=0.12.7
    - r-rcpparmadillo

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcpp >=0.12.7
    - r-rcpparmadillo

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('SFS')"           # [not win]
    - "\"%R%\" -e \"library('SFS')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=SFS
  license: GPL-3
  summary: 'An implementation of the Similarity-First Search algorithm (SFS), a combinatorial
    algorithm which can be used to solve the seriation problem and to recognize some
    structured weighted graphs. The SFS algorithm represents a generalization to weighted
    graphs of the graph search algorithm Lexicographic Breadth-First Search (Lex-BFS),
    a variant of Breadth-First Search. The SFS algorithm reduces to Lex-BFS when applied
    to binary matrices (or, equivalently, unweighted graphs). Hence this library can
    be also considered for Lex-BFS applications such as recognition of graph classes
    like chordal or unit interval graphs. In fact, the SFS seriation algorithm implemented
    in this package is a multisweep algorithm, which consists in repeating a finite
    number of SFS iterations (at most n sweeps for a matrix of size n). If the data
    matrix has a Robinsonian structure, then the ranking returned by the multistep SFS
    algorithm is a Robinson ordering of the input matrix. Otherwise the algorithm can
    be used as a heuristic to return a ranking partially satisfying the Robinson property. '

  license_family: GPL3
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-3'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: SFS
# Type: Package
# Title: Similarity-First Search Seriation Algorithm
# Version: 0.1.4
# Date: 2019-05-06
# Authors@R: c( person("Matteo", "Seminaroti", role = c("aut", "cph"), email = "matteo.seminaroti@gmail.com"), person("Utz-Uwe", "Haus", role = c("aut", "cre", "cph"), email = "uhaus@cray.com"), person("Monique", "Laurent", role = c("ctb"), email = "monique.laurent@cwi.nl") )
# Maintainer: Utz-Uwe Haus <uhaus@cray.com>
# Description: An implementation of the Similarity-First Search algorithm (SFS), a combinatorial algorithm which can be used to solve the seriation problem and to recognize some structured weighted graphs. The SFS algorithm represents a generalization to weighted graphs of the graph search algorithm Lexicographic Breadth-First Search (Lex-BFS), a variant of Breadth-First Search. The SFS algorithm reduces to Lex-BFS when applied to binary matrices (or, equivalently, unweighted graphs). Hence this library can be also considered for Lex-BFS applications such as recognition of graph classes like chordal or unit interval graphs. In fact, the SFS seriation algorithm implemented in this package is a multisweep algorithm, which consists in repeating a finite number of SFS iterations (at most n sweeps for a matrix of size n). If the data matrix has a Robinsonian structure, then the ranking returned by the multistep SFS algorithm is a Robinson ordering of the input matrix. Otherwise the algorithm can be used as a heuristic to return a ranking partially satisfying the Robinson property.
# License: GPL-3
# Encoding: UTF-8
# Imports: Rcpp (>= 0.12.7)
# Suggests: seriation
# LinkingTo: Rcpp, RcppArmadillo
# SystemRequirements: C++11
# RoxygenNote: 6.1.1
# NeedsCompilation: yes
# Packaged: 2019-05-07 06:02:30 UTC; uhaus
# Author: Matteo Seminaroti [aut, cph], Utz-Uwe Haus [aut, cre, cph], Monique Laurent [ctb]
# Repository: CRAN
# Date/Publication: 2019-05-07 07:30:04 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
