{% set version = '1.4-1' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-softimpute
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/softImpute_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/softImpute/softImpute_{{ version }}.tar.gz
  sha256: ea4c39831dee834204f6d6594aad6b937540ba4f2adf3f37fb4546844c234aec

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

# Suggests: knitr, rmarkdown
requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ compiler('fortran') }}        # [not win]
    - {{ compiler('m2w64_fortran') }}  # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-matrix

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-matrix

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('softImpute')"           # [not win]
    - "\"%R%\" -e \"library('softImpute')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://CRAN.R-project.org/package=softImpute
  license: GPL-2
  summary: Iterative methods for matrix completion that use nuclear-norm regularization. There
    are two main approaches.The one approach uses iterative soft-thresholded svds to
    impute the missing values. The second approach uses alternating least squares. Both
    have an 'EM' flavor, in that at each iteration the matrix is completed with the
    current estimate. For large matrices there is a special sparse-matrix class named
    "Incomplete" that efficiently handles all computations. The package includes procedures
    for centering and scaling rows, columns or both, and for computing low-rank SVDs
    on large sparse centered matrices (i.e. principal components).
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: softImpute
# Type: Package
# Title: Matrix Completion via Iterative Soft-Thresholded SVD
# Version: 1.4-1
# Date: 2021-5-08
# Author: Trevor Hastie <hastie@stanford.edu> and Rahul Mazumder <rahul.mazumder@gmail.com>
# Maintainer: Trevor Hastie <hastie@stanford.edu>
# Description: Iterative methods for matrix completion that use nuclear-norm regularization. There are two main approaches.The one approach uses iterative soft-thresholded svds to impute the missing values. The second approach uses alternating least squares. Both have an 'EM' flavor, in that at each iteration the matrix is completed with the current estimate. For large matrices there is a special sparse-matrix class named "Incomplete" that efficiently handles all computations. The package includes procedures for centering and scaling rows, columns or both, and for computing low-rank SVDs on large sparse centered matrices (i.e. principal components).
# License: GPL-2
# Depends: Matrix, methods
# Suggests: knitr, rmarkdown
# VignetteBuilder: knitr
# LazyLoad: yes
# NeedsCompilation: yes
# Packaged: 2021-05-09 00:14:29 UTC; hastie
# Repository: CRAN
# Date/Publication: 2021-05-09 05:10:03 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
