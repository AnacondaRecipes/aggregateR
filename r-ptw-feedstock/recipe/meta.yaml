{% set version = '1.9-16' %}

{% set posix = 'm2-' if win else '' %}
{% set native = 'm2w64-' if win else '' %}

package:
  name: r-ptw
  version: {{ version|replace("-", "_") }}

source:
  url:
    - {{ cran_mirror }}/src/contrib/ptw_{{ version }}.tar.gz
    - {{ cran_mirror }}/src/contrib/Archive/ptw/ptw_{{ version }}.tar.gz
  sha256: 7e87c34b9eeaeabe3bfb937162e6cda4dd48d6bd6a97b9db8bb8303d131caa66

build:
  merge_build_host: True  # [win]
  # If this is a new build for the same version, increment the build number.
  number: 0
  # no skip

  # This is required to make R link correctly on Linux.
  rpaths:
    - lib/R/lib/
    - lib/

requirements:
  build:
    - {{ compiler('c') }}              # [not win]
    - {{ compiler('m2w64_c') }}        # [win]
    - {{ posix }}filesystem        # [win]
    - {{ posix }}make
    - {{ posix }}sed               # [win]
    - {{ posix }}coreutils         # [win]
    - {{ posix }}zip               # [win]

  host:
    - r-base
    - r-rcppde

  run:
    - r-base
    - {{native}}gcc-libs         # [win]
    - r-rcppde

test:
  commands:
    # You can put additional test commands to be run here.
    - $R -e "library('ptw')"           # [not win]
    - "\"%R%\" -e \"library('ptw')\""  # [win]

  # You can also put a file called run_test.py, run_test.sh, or run_test.bat
  # in the recipe that will be run at test time.

  # requires:
    # Put any additional test requirements here.

about:
  home: https://github.com/rwehrens/ptw
  license: GPL-2
  summary: 'Parametric Time Warping aligns patterns, i.e. it aims to put corresponding features
    at the same locations. The algorithm searches for an optimal polynomial describing
    the warping. It is possible to align one sample to a reference, several samples
    to the same reference, or several samples to several references. One can choose
    between calculating individual warpings, or one global warping for a set of samples
    and one reference. Two optimization criteria are implemented: RMS (Root Mean Square
    error) and WCC (Weighted Cross Correlation). Both warping of peak profiles and of
    peak lists are supported. A vignette for the latter is contained in the inst/doc
    directory of the source package - the vignette source can be found on the package
    github site.'
  license_family: GPL2
  license_file:
    - '{{ environ["PREFIX"] }}/lib/R/share/licenses/GPL-2'

extra:
  recipe-maintainers:
    - katietz

# The original CRAN metadata for this package was:

# Package: ptw
# Type: Package
# Title: Parametric Time Warping
# Version: 1.9-16
# Authors@R: c(person("Jan", "Gerretzen", role = "ctb"), person("Paul", "Eilers", role = "aut"), person("Hans", "Wouters", role = "ctb"), person("Tom", "Bloemberg", role = "aut", email = "t.bloemberg@science.ru.nl"), person("Ron", "Wehrens", role = c("aut", "cre"), email = "ron.wehrens@gmail.com"))
# Description: Parametric Time Warping aligns patterns, i.e. it aims to put corresponding features at the same locations. The algorithm searches for an optimal polynomial describing the warping. It is possible to align one sample to a reference, several samples to the same reference, or several samples to several references. One can choose between calculating individual warpings, or one global warping for a set of samples and one reference. Two optimization criteria are implemented: RMS (Root Mean Square error) and WCC (Weighted Cross Correlation). Both warping of peak profiles and of peak lists are supported. A vignette for the latter is contained in the inst/doc directory of the source package - the vignette source can be found on the package github site.
# URL: https://github.com/rwehrens/ptw
# License: GPL (>= 2)
# Imports: RcppDE, graphics, grDevices, stats
# NeedsCompilation: yes
# Packaged: 2022-01-19 11:55:55 UTC; ron
# Author: Jan Gerretzen [ctb], Paul Eilers [aut], Hans Wouters [ctb], Tom Bloemberg [aut], Ron Wehrens [aut, cre]
# Maintainer: Ron Wehrens <ron.wehrens@gmail.com>
# Repository: CRAN
# Date/Publication: 2022-01-19 13:42:42 UTC

# See
# https://docs.conda.io/projects/conda-build for
# more information about meta.yaml
